
  
  

  


<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="chrome=1">
        <title>dist/less-1.0.30.min.js at master from cloudhead's less.js - GitHub</title>
    <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub" />
    <link rel="fluid-icon" href="http://github.com/fluidicon.png" title="GitHub" />

    <link href="http://assets0.github.com/stylesheets/bundle_common.css?61b5039b1ce255c2a6acbff52acc1f9b426a05b2" media="screen" rel="stylesheet" type="text/css" />
<link href="http://assets0.github.com/stylesheets/bundle_github.css?61b5039b1ce255c2a6acbff52acc1f9b426a05b2" media="screen" rel="stylesheet" type="text/css" />

    <script type="text/javascript" charset="utf-8">
      var GitHub = {}
      var github_user = null
      
    </script>
    <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
    <script src="http://assets2.github.com/javascripts/bundle_common.js?61b5039b1ce255c2a6acbff52acc1f9b426a05b2" type="text/javascript"></script>
<script src="http://assets3.github.com/javascripts/bundle_github.js?61b5039b1ce255c2a6acbff52acc1f9b426a05b2" type="text/javascript"></script>

        <script type="text/javascript" charset="utf-8">
      GitHub.spy({
        repo: "cloudhead/less.js"
      })
    </script>

    
  
    
  

  <link href="http://github.com/cloudhead/less.js/commits/master.atom" rel="alternate" title="Recent Commits to less.js:master" type="application/atom+xml" />

        <meta name="description" content="Leaner CSS, in your browser." />
    <script type="text/javascript">
      GitHub.nameWithOwner = GitHub.nameWithOwner || "cloudhead/less.js";
      GitHub.currentRef = "master";
    </script>
  

            <script type="text/javascript">
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-3769691-2']);
      _gaq.push(['_trackPageview']);
      (function() {
        var ga = document.createElement('script');
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        ga.setAttribute('async', 'true');
        document.documentElement.firstChild.appendChild(ga);
      })();
    </script>

  </head>

  

  <body>
    

    
      <script type="text/javascript">
        var _kmq = _kmq || [];
        function _kms(u){
          var s = document.createElement('script'); var f = document.getElementsByTagName('script')[0]; s.type = 'text/javascript'; s.async = true;
          s.src = u; f.parentNode.insertBefore(s, f);
        }
        _kms('//i.kissmetrics.com/i.js');_kms('//doug1izaerwt3.cloudfront.net/406e8bf3a2b8846ead55afb3cfaf6664523e3a54.1.js');
      </script>
    

    

    

    <div class="subnavd" id="main">
      <div id="header" class="pageheaded">
        <div class="site">
          <div class="logo">
            <a href="http://github.com"><img src="/images/modules/header/logov3.png" alt="github" /></a>
          </div>
          
          <div class="topsearch">
  
    <form action="/search" id="top_search_form" method="get">
      <a href="/search" class="advanced-search tooltipped downwards" title="Advanced Search">Advanced Search</a>
      <input type="search" class="search my_repos_autocompleter" name="q" results="5" placeholder="Search&hellip;" /> <input type="submit" value="Search" class="button" />
      <input type="hidden" name="type" value="Everything" />
      <input type="hidden" name="repo" value="" />
      <input type="hidden" name="langOverride" value="" />
      <input type="hidden" name="start_value" value="1" />
    </form>
  
  
    <ul class="nav logged_out">
      
        <li><a href="http://github.com">Home</a></li>
        <li class="pricing"><a href="/plans">Pricing and Signup</a></li>
        <li><a href="http://github.com/explore">Explore GitHub</a></li>
        
        <li><a href="/blog">Blog</a></li>
      
      <li><a href="https://github.com/login">Login</a></li>
    </ul>
  
</div>

        </div>
      </div>

      
      
        
    <div class="site">
      <div class="pagehead repohead vis-public   ">
        <h1>
          <a href="/cloudhead">cloudhead</a> / <strong><a href="http://github.com/cloudhead/less.js">less.js</a></strong>
          
          
        </h1>

        
    <ul class="actions">
      

      
        <li class="for-owner" style="display:none"><a href="https://github.com/cloudhead/less.js/edit" class="minibutton btn-admin "><span><span class="icon"></span>Admin</span></a></li>
        <li>
          <a href="/cloudhead/less.js/toggle_watch" class="minibutton btn-watch " id="watch_button" style="display:none"><span><span class="icon"></span>Watch</span></a>
          <a href="/cloudhead/less.js/toggle_watch" class="minibutton btn-watch " id="unwatch_button" style="display:none"><span><span class="icon"></span>Unwatch</span></a>
        </li>
        
          
            <li class="for-notforked" style="display:none"><a href="/cloudhead/less.js/fork" class="minibutton btn-fork " id="fork_button" onclick="var f = document.createElement('form'); f.style.display = 'none'; this.parentNode.appendChild(f); f.method = 'POST'; f.action = this.href;var s = document.createElement('input'); s.setAttribute('type', 'hidden'); s.setAttribute('name', 'authenticity_token'); s.setAttribute('value', 'c8ca5266c2bce2bf9cdf9e95ceeef728a69adb5b'); f.appendChild(s);f.submit();return false;"><span><span class="icon"></span>Fork</span></a></li>
            <li class="for-hasfork" style="display:none"><a href="#" class="minibutton btn-fork " id="your_fork_button"><span><span class="icon"></span>Your Fork</span></a></li>
          

          
          <li id="pull_request_item" class='ospr' style="display:none"><a href="/cloudhead/less.js/pull_request/" class="minibutton btn-pull-request "><span><span class="icon"></span>Pull Request</span></a></li>
          

          <li><a href="#" class="minibutton btn-download " id="download_button"><span><span class="icon"></span>Download Source</span></a></li>
        
      
      
      <li class="repostats">
        <ul class="repo-stats">
          <li class="watchers"><a href="/cloudhead/less.js/watchers" title="Watchers" class="tooltipped downwards">441</a></li>
          <li class="forks"><a href="/cloudhead/less.js/network" title="Forks" class="tooltipped downwards">19</a></li>
        </ul>
      </li>
    </ul>


        
  <ul class="tabs">
    <li><a href="http://github.com/cloudhead/less.js/tree/master" class="selected" highlight="repo_source">Source</a></li>
    <li><a href="http://github.com/cloudhead/less.js/commits/master" highlight="repo_commits">Commits</a></li>

    
    <li><a href="/cloudhead/less.js/network" highlight="repo_network">Network (19)</a></li>

    

    
      
      <li><a href="/cloudhead/less.js/issues" highlight="issues">Issues (25)</a></li>
    

    
      
      <li><a href="/cloudhead/less.js/downloads">Downloads (1)</a></li>
    

    
      
      <li><a href="http://wiki.github.com/cloudhead/less.js/">Wiki (2)</a></li>
    

    <li><a href="/cloudhead/less.js/graphs" highlight="repo_graphs">Graphs</a></li>

    <li class="contextswitch nochoices">
      <span class="toggle leftwards" >
        <em>Branch:</em>
        <code>master</code>
      </span>
    </li>
  </ul>

  <div style="display:none" id="pl-description"><p><em class="placeholder">click here to add a description</em></p></div>
  <div style="display:none" id="pl-homepage"><p><em class="placeholder">click here to add a homepage</em></p></div>

  <div class="subnav-bar">
  
  <ul>
    <li>
      <a href="#" class="dropdown">Switch Branches (1)</a>
      <ul>
        
          
            <li><strong>master &#x2713;</strong></li>
            
      </ul>
    </li>
    <li>
      <a href="#" class="dropdown ">Switch Tags (1)</a>
              <ul>
                      
              <li><a href="/cloudhead/less.js/blob/v1.0/dist/less-1.0.30.min.js">v1.0</a></li>
            
                  </ul>
      
    </li>
    <li>
    
    <a href="/cloudhead/less.js/branches" class="manage">Branch List</a>
    
    </li>
  </ul>
</div>

  
  
  
  
  


        
    <div id="repo_details" class="metabox clearfix">
      <div id="repo_details_loader" class="metabox-loader" style="display:none">Sending Request&hellip;</div>

      
        <div class="pledgie">
          <a href='http://pledgie.com/campaigns/10293'><img alt='Click here to lend your support to: less.js and make a donation at www.pledgie.com !' src='http://www.pledgie.com/campaigns/10293.png?skin_name=chrome' border='0' /></a>
        </div>
      

      <div id="repository_description" rel="repository_description_edit">
        
          <p>Leaner CSS, in your browser.
            <span id="read_more" style="display:none">&mdash; <a href="#readme">Read more</a></span>
          </p>
        
      </div>
      <div id="repository_description_edit" style="display:none;" class="inline-edit">
        <form action="/cloudhead/less.js/edit/update" method="post"><div style="margin:0;padding:0"><input name="authenticity_token" type="hidden" value="c8ca5266c2bce2bf9cdf9e95ceeef728a69adb5b" /></div>
          <input type="hidden" name="field" value="repository_description">
          <input type="text" class="textfield" name="value" value="Leaner CSS, in your browser.">
          <div class="form-actions">
            <button class="minibutton"><span>Save</span></button> &nbsp; <a href="#" class="cancel">Cancel</a>
          </div>
        </form>
      </div>

      
      <div class="repository-homepage" id="repository_homepage" rel="repository_homepage_edit">
        <p><a href="http://" rel="nofollow"></a></p>
      </div>
      <div id="repository_homepage_edit" style="display:none;" class="inline-edit">
        <form action="/cloudhead/less.js/edit/update" method="post"><div style="margin:0;padding:0"><input name="authenticity_token" type="hidden" value="c8ca5266c2bce2bf9cdf9e95ceeef728a69adb5b" /></div>
          <input type="hidden" name="field" value="repository_homepage">
          <input type="text" class="textfield" name="value" value="">
          <div class="form-actions">
            <button class="minibutton"><span>Save</span></button> &nbsp; <a href="#" class="cancel">Cancel</a>
          </div>
        </form>
      </div>

      <div class="rule "></div>

      <div id="url_box" class="url-box">
        <ul class="clone-urls">
          
            
            <li id="http_clone_url"><a href="http://github.com/cloudhead/less.js.git" data-permissions="Read-Only">HTTP</a></li>
            <li id="public_clone_url"><a href="git://github.com/cloudhead/less.js.git" data-permissions="Read-Only">Git Read-Only</a></li>
          
        </ul>
        <input type="text" spellcheck="false" id="url_field" class="url-field" />
              <span style="display:none" id="url_box_clippy"></span>
      <span id="clippy_tooltip_url_box_clippy" class="clippy-tooltip tooltipped" title="copy to clipboard">
      <object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"
              width="14"
              height="14"
              class="clippy"
              id="clippy" >
      <param name="movie" value="http://assets2.github.com/flash/clippy.swf?v5"/>
      <param name="allowScriptAccess" value="always" />
      <param name="quality" value="high" />
      <param name="scale" value="noscale" />
      <param NAME="FlashVars" value="id=url_box_clippy&amp;copied=&amp;copyto=">
      <param name="bgcolor" value="#FFFFFF">
      <param name="wmode" value="opaque">
      <embed src="http://assets2.github.com/flash/clippy.swf?v5"
             width="14"
             height="14"
             name="clippy"
             quality="high"
             allowScriptAccess="always"
             type="application/x-shockwave-flash"
             pluginspage="http://www.macromedia.com/go/getflashplayer"
             FlashVars="id=url_box_clippy&amp;copied=&amp;copyto="
             bgcolor="#FFFFFF"
             wmode="opaque"
      />
      </object>
      </span>

        <p id="url_description">This URL has <strong>Read+Write</strong> access</p>
      </div>
    </div>


        

      </div><!-- /.pagehead -->

      









<script type="text/javascript">
  GitHub.currentCommitRef = "master"
  GitHub.currentRepoOwner = "cloudhead"
  GitHub.currentRepo = "less.js"
  GitHub.downloadRepo = '/cloudhead/less.js/archives/master'

  

  
</script>










  <div id="commit">
    <div class="group">
        
  <div class="envelope commit">
    <div class="human">
      
        <div class="message"><pre><a href="/cloudhead/less.js/commit/d3c873ed5f93ee0060f9eb23b5e80f6a9a3cb5e6">Fix for stylesheets having a '.' in their basename</a> </pre></div>
      

      <div class="actor">
        <div class="gravatar">
          
          <img src="http://www.gravatar.com/avatar/ca6e92a6fc51417b3749e68d26df1f29?s=140&d=http%3A%2F%2Fgithub.com%2Fimages%2Fgravatars%2Fgravatar-140.png" alt="" width="30" height="30"  />
        </div>
        <div class="name"><a href="/vicb">vicb</a> <span>(author)</span></div>
        <div class="date">
          <abbr class="relatize" title="2010-07-01 07:33:48">Thu Jul 01 07:33:48 -0700 2010</abbr>
        </div>
      </div>

      
        <div class="actor">
          <div class="gravatar">
            <img src="http://www.gravatar.com/avatar/d2b460973fbcb64268528587d47f0989?s=140&d=http%3A%2F%2Fgithub.com%2Fimages%2Fgravatars%2Fgravatar-140.png" alt="" width="30" height="30"  />
          </div>
          <div class="name"><a href="/cloudhead">cloudhead</a> <span>(committer)</span></div>
          <div class="date"><abbr class="relatize" title="2010-07-01 10:23:46">Thu Jul 01 10:23:46 -0700 2010</abbr></div>
        </div>
      

    </div>
    <div class="machine">
      <span>c</span>ommit&nbsp;&nbsp;<a href="/cloudhead/less.js/commit/d3c873ed5f93ee0060f9eb23b5e80f6a9a3cb5e6" hotkey="c">d3c873ed5f93ee0060f9</a><br />
      <span>t</span>ree&nbsp;&nbsp;&nbsp;&nbsp;<a href="/cloudhead/less.js/tree/d3c873ed5f93ee0060f9eb23b5e80f6a9a3cb5e6" hotkey="t">fdd55635074ca42ed165</a><br />
      
        <span>p</span>arent&nbsp;
        
        <a href="/cloudhead/less.js/tree/75e7f801fee16bc4183b0479cd281ec606fc4327" hotkey="p">75e7f801fee16bc4183b</a>
      

    </div>
  </div>

    </div>
  </div>



  
    <div id="path">
      <b><a href="/cloudhead/less.js/tree/master">less.js</a></b> / <a href="/cloudhead/less.js/tree/master/dist">dist</a> / less-1.0.30.min.js       <span style="display:none" id="clippy_956">dist/less-1.0.30.min.js</span>
      
      <object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"
              width="110"
              height="14"
              class="clippy"
              id="clippy" >
      <param name="movie" value="http://assets2.github.com/flash/clippy.swf?v5"/>
      <param name="allowScriptAccess" value="always" />
      <param name="quality" value="high" />
      <param name="scale" value="noscale" />
      <param NAME="FlashVars" value="id=clippy_956&amp;copied=copied!&amp;copyto=copy to clipboard">
      <param name="bgcolor" value="#FFFFFF">
      <param name="wmode" value="opaque">
      <embed src="http://assets2.github.com/flash/clippy.swf?v5"
             width="110"
             height="14"
             name="clippy"
             quality="high"
             allowScriptAccess="always"
             type="application/x-shockwave-flash"
             pluginspage="http://www.macromedia.com/go/getflashplayer"
             FlashVars="id=clippy_956&amp;copied=copied!&amp;copyto=copy to clipboard"
             bgcolor="#FFFFFF"
             wmode="opaque"
      />
      </object>
      

    </div>

    <div id="files">
      <div class="file">
        <div class="meta">
          <div class="info">
            <span class="icon"><img alt="Txt" height="16" src="http://assets0.github.com/images/icons/txt.png?13a95cfdd231d5cfa2cd8a5fd61a9e233e9066d4" width="16" /></span>
            <span class="mode" title="File Mode">100644</span>
            
              <span>64 lines (63 sloc)</span>
            
            <span>29.304 kb</span>
          </div>
          <ul class="actions">
            
              <li><a id="file-edit-link" href="#" rel="/cloudhead/less.js/file-edit/__ref__/dist/less-1.0.30.min.js">edit</a></li>
            
            <li><a href="/cloudhead/less.js/raw/master/dist/less-1.0.30.min.js" id="raw-url">raw</a></li>
            
              <li><a href="/cloudhead/less.js/blame/master/dist/less-1.0.30.min.js">blame</a></li>
            
            <li><a href="/cloudhead/less.js/commits/master/dist/less-1.0.30.min.js">history</a></li>
          </ul>
        </div>
        
  <div class="data syntax type-javascript">
    
      <table cellpadding="0" cellspacing="0">
        <tr>
          <td>
            <pre class="line_numbers"><span id="LID1" rel="#L1">1</span>
<span id="LID2" rel="#L2">2</span>
<span id="LID3" rel="#L3">3</span>
<span id="LID4" rel="#L4">4</span>
<span id="LID5" rel="#L5">5</span>
<span id="LID6" rel="#L6">6</span>
<span id="LID7" rel="#L7">7</span>
<span id="LID8" rel="#L8">8</span>
<span id="LID9" rel="#L9">9</span>
<span id="LID10" rel="#L10">10</span>
<span id="LID11" rel="#L11">11</span>
<span id="LID12" rel="#L12">12</span>
<span id="LID13" rel="#L13">13</span>
<span id="LID14" rel="#L14">14</span>
<span id="LID15" rel="#L15">15</span>
<span id="LID16" rel="#L16">16</span>
<span id="LID17" rel="#L17">17</span>
<span id="LID18" rel="#L18">18</span>
<span id="LID19" rel="#L19">19</span>
<span id="LID20" rel="#L20">20</span>
<span id="LID21" rel="#L21">21</span>
<span id="LID22" rel="#L22">22</span>
<span id="LID23" rel="#L23">23</span>
<span id="LID24" rel="#L24">24</span>
<span id="LID25" rel="#L25">25</span>
<span id="LID26" rel="#L26">26</span>
<span id="LID27" rel="#L27">27</span>
<span id="LID28" rel="#L28">28</span>
<span id="LID29" rel="#L29">29</span>
<span id="LID30" rel="#L30">30</span>
<span id="LID31" rel="#L31">31</span>
<span id="LID32" rel="#L32">32</span>
<span id="LID33" rel="#L33">33</span>
<span id="LID34" rel="#L34">34</span>
<span id="LID35" rel="#L35">35</span>
<span id="LID36" rel="#L36">36</span>
<span id="LID37" rel="#L37">37</span>
<span id="LID38" rel="#L38">38</span>
<span id="LID39" rel="#L39">39</span>
<span id="LID40" rel="#L40">40</span>
<span id="LID41" rel="#L41">41</span>
<span id="LID42" rel="#L42">42</span>
<span id="LID43" rel="#L43">43</span>
<span id="LID44" rel="#L44">44</span>
<span id="LID45" rel="#L45">45</span>
<span id="LID46" rel="#L46">46</span>
<span id="LID47" rel="#L47">47</span>
<span id="LID48" rel="#L48">48</span>
<span id="LID49" rel="#L49">49</span>
<span id="LID50" rel="#L50">50</span>
<span id="LID51" rel="#L51">51</span>
<span id="LID52" rel="#L52">52</span>
<span id="LID53" rel="#L53">53</span>
<span id="LID54" rel="#L54">54</span>
<span id="LID55" rel="#L55">55</span>
<span id="LID56" rel="#L56">56</span>
<span id="LID57" rel="#L57">57</span>
<span id="LID58" rel="#L58">58</span>
<span id="LID59" rel="#L59">59</span>
<span id="LID60" rel="#L60">60</span>
<span id="LID61" rel="#L61">61</span>
<span id="LID62" rel="#L62">62</span>
<span id="LID63" rel="#L63">63</span>
<span id="LID64" rel="#L64">64</span>
</pre>
          </td>
          <td width="100%">
            
              <div class="highlight"><pre><div class='line' id='LC1'><span class="c1">//</span></div><div class='line' id='LC2'><span class="c1">// LESS - Leaner CSS v1.0.30</span></div><div class='line' id='LC3'><span class="c1">// http://lesscss.org</span></div><div class='line' id='LC4'><span class="c1">// </span></div><div class='line' id='LC5'><span class="c1">// Copyright (c) 2010, Alexis Sellier</span></div><div class='line' id='LC6'><span class="c1">// Licensed under the Apache 2.0 License.</span></div><div class='line' id='LC7'><span class="c1">//</span></div><div class='line' id='LC8'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">F</span><span class="p">){</span><span class="kd">function</span> <span class="nx">q</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="nx">F</span><span class="p">.</span><span class="nx">less</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">"/"</span><span class="p">)[</span><span class="mi">1</span><span class="p">]]}</span><span class="kd">function</span> <span class="nx">R</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">o</span><span class="p">.</span><span class="nx">sheets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">S</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">sheets</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">o</span><span class="p">.</span><span class="nx">sheets</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="p">(</span><span class="nx">e</span><span class="o">+</span><span class="mi">1</span><span class="p">))}</span><span class="kd">function</span> <span class="nx">S</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\?.*$/</span><span class="p">,</span><span class="s2">""</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="nx">D</span><span class="o">&amp;&amp;</span><span class="nx">D</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">i</span><span class="o">=</span><span class="nx">D</span><span class="o">&amp;&amp;</span><span class="nx">D</span><span class="p">.</span><span class="nx">getItem</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="s2">":timestamp"</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="p">{</span><span class="nx">css</span><span class="o">:</span><span class="nx">j</span><span class="p">,</span><span class="nx">timestamp</span><span class="o">:</span><span class="nx">i</span><span class="p">};</span><span class="nx">Z</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">href</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">r</span><span class="p">)).</span><span class="nx">valueOf</span><span class="p">()</span><span class="o">===</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">timestamp</span><span class="p">)).</span><span class="nx">valueOf</span><span class="p">()){</span><span class="nx">O</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">css</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">d</span><span class="p">,{</span><span class="nx">local</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span><span class="nx">remaining</span><span class="o">:</span><span class="nx">g</span><span class="p">})}</span><span class="k">else</span><span class="p">(</span><span class="k">new</span> <span class="nx">o</span><span class="p">.</span><span class="nx">Parser</span><span class="p">({</span><span class="nx">optimization</span><span class="o">:</span><span class="nx">o</span><span class="p">.</span><span class="nx">optimization</span><span class="p">,</span><span class="nx">paths</span><span class="o">:</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[\w\.-]+$/</span><span class="p">,</span><span class="s2">""</span><span class="p">)]})).</span><span class="nx">parse</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span></div><div class='line' id='LC9'><span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">t</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span><span class="k">return</span> <span class="nx">T</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">try</span><span class="p">{</span><span class="nx">b</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">d</span><span class="p">,{</span><span class="nx">local</span><span class="o">:</span><span class="kc">false</span><span class="p">,</span><span class="nx">lastModified</span><span class="o">:</span><span class="nx">r</span><span class="p">,</span><span class="nx">remaining</span><span class="o">:</span><span class="nx">g</span><span class="p">});</span><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">"less-error-message:"</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[^a-z]+/gi</span><span class="p">,</span><span class="s2">"-"</span><span class="p">)))}</span><span class="k">catch</span><span class="p">(</span><span class="nx">u</span><span class="p">){</span><span class="nx">T</span><span class="p">(</span><span class="nx">u</span><span class="p">,</span><span class="nx">a</span><span class="p">)}})},</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">){</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">"Couldn&#39;t load "</span><span class="o">+</span><span class="nx">r</span><span class="o">+</span><span class="s2">" ("</span><span class="o">+</span><span class="nx">n</span><span class="o">+</span><span class="s2">")"</span><span class="p">);})}</span><span class="kd">function</span> <span class="nx">O</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">href</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">href</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\?.*$/</span><span class="p">,</span><span class="s2">""</span><span class="p">)</span><span class="o">:</span><span class="s2">""</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="s2">"less:"</span><span class="o">+</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">title</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/(?:^|\/)([-\w]+)\.[a-z]+$/i</span><span class="p">)[</span><span class="mi">1</span><span class="p">]);</span><span class="k">if</span><span class="p">((</span><span class="nx">g</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">j</span><span class="p">))</span><span class="o">===</span><span class="kc">null</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">"style"</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span><span class="s2">"text/css"</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">media</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">media</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">"head"</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">g</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">styleSheet</span><span class="p">)</span><span class="k">try</span><span class="p">{</span><span class="nx">g</span><span class="p">.</span><span class="nx">styleSheet</span><span class="p">.</span><span class="nx">cssText</span><span class="o">=</span></div><div class='line' id='LC10'><span class="nx">d</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">i</span><span class="p">){</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">"Couldn&#39;t reassign styleSheet.cssText."</span><span class="p">);}</span><span class="k">else</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">h</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">childNodes</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="nx">g</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">.</span><span class="nx">nodeValue</span><span class="o">!==</span><span class="nx">h</span><span class="p">.</span><span class="nx">nodeValue</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">.</span><span class="nx">replaceChild</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">);</span><span class="k">else</span> <span class="nx">g</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">h</span><span class="p">)})(</span><span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="nx">d</span><span class="p">));</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">D</span><span class="p">){</span><span class="nx">J</span><span class="p">(</span><span class="s2">"saving "</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">" to cache."</span><span class="p">);</span><span class="nx">D</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="nx">D</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="s2">":timestamp"</span><span class="p">,</span><span class="nx">e</span><span class="p">)}}</span><span class="kd">function</span> <span class="nx">Z</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">n</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">status</span><span class="o">&gt;=</span><span class="mi">200</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">status</span><span class="o">&lt;</span><span class="mi">300</span><span class="p">)</span><span class="nx">h</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">responseText</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">getResponseHeader</span><span class="p">(</span><span class="s2">"Last-Modified"</span><span class="p">));</span><span class="k">else</span> <span class="k">typeof</span> <span class="nx">n</span><span class="o">===</span><span class="s2">"function"</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">status</span><span class="p">,</span><span class="nx">d</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">aa</span><span class="p">(),</span><span class="nx">j</span><span class="o">=</span><span class="nx">P</span><span class="o">?</span><span class="kc">false</span><span class="o">:</span><span class="nx">o</span><span class="p">.</span><span class="nx">async</span><span class="p">;</span></div><div class='line' id='LC11'><span class="k">typeof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">overrideMimeType</span><span class="o">===</span><span class="s2">"function"</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">overrideMimeType</span><span class="p">(</span><span class="s2">"text/css"</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">"GET"</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">j</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">P</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">status</span><span class="o">===</span><span class="mi">0</span><span class="o">?</span><span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">responseText</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">status</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">onreadystatechange</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">a</span><span class="p">.</span><span class="nx">readyState</span><span class="o">==</span><span class="mi">4</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">)};</span><span class="k">else</span> <span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">aa</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="nx">F</span><span class="p">.</span><span class="nx">XMLHttpRequest</span><span class="p">)</span><span class="k">return</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">;</span><span class="k">else</span> <span class="k">try</span><span class="p">{</span><span class="k">return</span> <span class="k">new</span> <span class="nx">ActiveXObject</span><span class="p">(</span><span class="s2">"MSXML2.XMLHTTP.3.0"</span><span class="p">)}</span><span class="k">catch</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">J</span><span class="p">(</span><span class="s2">"browser doesn&#39;t support AJAX."</span><span class="p">);</span><span class="k">return</span> <span class="kc">null</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">$</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">parentNode</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">d</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">J</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">o</span><span class="p">.</span><span class="nx">env</span><span class="o">==</span><span class="s2">"development"</span><span class="o">&amp;&amp;</span><span class="k">typeof</span> <span class="nx">console</span><span class="o">!==</span></div><div class='line' id='LC12'><span class="s2">"undefined"</span><span class="o">&amp;&amp;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"less: "</span><span class="o">+</span><span class="nx">d</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">T</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="s2">"less-error-message:"</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[^a-z]+/ig</span><span class="p">,</span><span class="s2">"-"</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">d</span><span class="p">.</span><span class="nx">extract</span><span class="p">)</span><span class="k">throw</span> <span class="nx">d</span><span class="p">;</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">"div"</span><span class="p">),</span><span class="nx">a</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">className</span><span class="o">=</span><span class="s2">"less-error-message"</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">innerHTML</span><span class="o">=</span><span class="s2">"&lt;h3&gt;"</span><span class="o">+</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">message</span><span class="o">||</span><span class="s2">"There is an error in your .less file"</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;&lt;/h3&gt;&lt;p&gt;&lt;a href="&#39;</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="s1">&#39;"&gt;&#39;</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="s2">"&lt;/a&gt; on line "</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">line</span><span class="o">+</span><span class="s2">", column "</span><span class="o">+</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">column</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="s2">":&lt;/p&gt;"</span><span class="o">+</span><span class="s1">&#39;&lt;div&gt;\n&lt;pre class="ctx"&gt;&lt;span&gt;[-1]&lt;/span&gt;{0}&lt;/pre&gt;\n&lt;pre&gt;&lt;span&gt;[0]&lt;/span&gt;{current}&lt;/pre&gt;\n&lt;pre class="ctx"&gt;&lt;span&gt;[1]&lt;/span&gt;{2}&lt;/pre&gt;\n&lt;/div&gt;&#39;</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\[(-?\d)\]/g</span><span class="p">,</span></div><div class='line' id='LC13'><span class="kd">function</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="k">return</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">line</span><span class="p">)</span><span class="o">+</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="o">||</span><span class="s2">""</span><span class="p">}).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\{(\d)\}/g</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">extract</span><span class="p">[</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">i</span><span class="p">)]</span><span class="o">||</span><span class="s2">""</span><span class="p">}).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\{current\}/</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">extract</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">column</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;&lt;span class="error"&gt;&#39;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">extract</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">slice</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">column</span><span class="p">)</span><span class="o">+</span><span class="s2">"&lt;/span&gt;"</span><span class="p">);</span><span class="nx">O</span><span class="p">(</span><span class="s2">".less-error-message span {\nmargin-right: 15px;\n}\n.less-error-message pre {\ncolor: #ee4444;\npadding: 4px 0;\nmargin: 0;\n}\n.less-error-message pre.ctx {\ncolor: #dd7777;\n}\n.less-error-message h3 {\npadding: 15px 0 5px 0;\nmargin: 0;\n}\n.less-error-message a {\ncolor: #10a\n}\n.less-error-message .error {\ncolor: red;\nfont-weight: bold;\npadding-bottom: 2px;\nborder-bottom: 1px dashed red;\n}"</span><span class="p">,</span></div><div class='line' id='LC14'><span class="p">{</span><span class="nx">title</span><span class="o">:</span><span class="s2">"error-message"</span><span class="p">});</span><span class="nx">g</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">cssText</span><span class="o">=</span><span class="s2">"font-family: Arial, sans-serif;border: 1px solid #e00;background-color: #eee;border-radius: 5px;-webkit-border-radius: 5px;-moz-border-radius: 5px;color: #e00;padding: 15px;margin-bottom: 15px"</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">env</span><span class="o">==</span><span class="s2">"development"</span><span class="p">)</span><span class="nx">a</span><span class="o">=</span><span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">){</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="o">?</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">replaceChild</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">e</span><span class="p">))</span><span class="o">:</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">insertBefore</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">);</span><span class="nx">clearInterval</span><span class="p">(</span><span class="nx">a</span><span class="p">)}},</span><span class="mi">10</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">)</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toString</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="o">===</span></div><div class='line' id='LC15'><span class="s2">"[object Array]"</span><span class="o">||</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">};</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">forEach</span><span class="p">)</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">forEach</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;&gt;&gt;</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="nx">g</span> <span class="k">in</span> <span class="k">this</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">g</span><span class="p">,</span><span class="k">this</span><span class="p">)};</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">map</span><span class="p">)</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;&gt;&gt;</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">e</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">in</span> <span class="k">this</span><span class="p">)</span><span class="nx">g</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">);</span><span class="k">return</span> <span class="nx">g</span><span class="p">};</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">filter</span><span class="p">)</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">filter</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="p">[],</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">[</span><span class="nx">g</span><span class="p">])</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="nx">g</span><span class="p">]);</span><span class="k">return</span> <span class="nx">e</span><span class="p">};</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">reduce</span><span class="p">)</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">reduce</span><span class="o">=</span></div><div class='line' id='LC16'><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;&gt;&gt;</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">===</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">1</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;=</span><span class="mi">2</span><span class="p">)</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="k">else</span><span class="p">{</span><span class="k">do</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span> <span class="k">in</span> <span class="k">this</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">[</span><span class="nx">e</span><span class="o">++</span><span class="p">];</span><span class="k">break</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="o">++</span><span class="nx">e</span><span class="o">&gt;=</span><span class="nx">b</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">;}</span><span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">)}</span><span class="k">for</span><span class="p">(;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span> <span class="k">in</span> <span class="k">this</span><span class="p">)</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="k">this</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">);</span><span class="k">return</span> <span class="nx">g</span><span class="p">};</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">)</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">indexOf</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">&gt;=</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span><span class="nx">b</span><span class="o">+=</span><span class="nx">e</span><span class="p">;</span><span class="k">for</span><span class="p">(;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">b</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">===</span><span class="k">this</span><span class="p">[</span><span class="nx">b</span><span class="p">])</span><span class="k">return</span> <span class="nx">b</span><span class="p">;</span><span class="k">return</span><span class="o">-</span><span class="mi">1</span><span class="p">};</span></div><div class='line' id='LC17'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">)</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span> <span class="k">in</span> <span class="nx">d</span><span class="p">)</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">trim</span><span class="p">)</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">trim</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^\s\s*/</span><span class="p">,</span><span class="s2">""</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\s\s*$/</span><span class="p">,</span><span class="s2">""</span><span class="p">)};</span><span class="kd">var</span> <span class="nx">o</span><span class="p">,</span><span class="nx">m</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">F</span><span class="o">===</span><span class="s2">"undefined"</span><span class="p">){</span><span class="nx">o</span><span class="o">=</span><span class="nx">exports</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="nx">q</span><span class="p">(</span><span class="s2">"less/tree"</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="nx">o</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">less</span><span class="o">=</span><span class="p">{};</span><span class="nx">m</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">less</span><span class="p">.</span><span class="nx">tree</span><span class="o">=</span><span class="p">{}}</span><span class="nx">o</span><span class="p">.</span><span class="nx">Parser</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(){</span><span class="nx">r</span><span class="o">=</span><span class="nx">u</span><span class="p">[</span><span class="nx">n</span><span class="p">];</span><span class="nx">H</span><span class="o">=</span><span class="nx">x</span><span class="o">=</span><span class="nx">h</span><span class="p">}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(){</span><span class="nx">u</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">r</span><span class="p">;</span><span class="nx">H</span><span class="o">=</span><span class="nx">h</span><span class="o">=</span><span class="nx">x</span><span class="p">}</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="o">&gt;</span><span class="nx">H</span><span class="p">){</span><span class="nx">u</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">u</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">slice</span><span class="p">(</span><span class="nx">h</span><span class="o">-</span><span class="nx">H</span><span class="p">);</span><span class="nx">H</span><span class="o">=</span><span class="nx">h</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">a</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">k</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">p</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span> <span class="k">instanceof</span></div><div class='line' id='LC18'><span class="nb">Function</span><span class="p">)</span><span class="k">return</span> <span class="nx">f</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">U</span><span class="p">.</span><span class="nx">parsers</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">f</span><span class="o">===</span><span class="s2">"string"</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="o">===</span><span class="nx">f</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="kc">null</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">g</span><span class="p">()}</span><span class="k">else</span><span class="p">{</span><span class="nx">g</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">u</span><span class="p">[</span><span class="nx">n</span><span class="p">]))</span><span class="nx">k</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span><span class="k">else</span> <span class="k">return</span> <span class="kc">null</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="nx">mem</span><span class="o">=</span><span class="nx">h</span><span class="o">+=</span><span class="nx">k</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">p</span><span class="o">=</span><span class="nx">h</span><span class="o">+</span><span class="nx">u</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">length</span><span class="o">-</span><span class="nx">k</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">p</span><span class="p">;){</span><span class="nx">l</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">l</span><span class="o">===</span><span class="mi">32</span><span class="o">||</span><span class="nx">l</span><span class="o">===</span><span class="mi">10</span><span class="o">||</span><span class="nx">l</span><span class="o">===</span><span class="mi">9</span><span class="p">))</span><span class="k">break</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">}</span><span class="nx">u</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">u</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">slice</span><span class="p">(</span><span class="nx">k</span><span class="o">+</span><span class="p">(</span><span class="nx">h</span><span class="o">-</span><span class="nx">mem</span><span class="p">));</span><span class="nx">H</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="nx">u</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">length</span><span class="o">===</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">u</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="o">++</span><span class="p">;</span><span class="k">return</span> <span class="k">typeof</span> <span class="nx">f</span><span class="o">===</span><span class="s2">"string"</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">1</span><span class="o">?</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span><span class="nx">f</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">j</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="k">return</span> <span class="k">typeof</span> <span class="nx">f</span><span class="o">===</span><span class="s2">"string"</span><span class="o">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="o">===</span><span class="nx">f</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">u</span><span class="p">[</span><span class="nx">n</span><span class="p">])</span><span class="o">?</span><span class="kc">true</span><span class="o">:</span><span class="kc">false</span><span class="p">}</span><span class="kd">var</span> <span class="nx">i</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">x</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">u</span><span class="p">,</span><span class="nx">H</span><span class="p">,</span><span class="nx">U</span><span class="p">,</span><span class="nx">V</span><span class="o">=</span><span class="kd">function</span><span class="p">(){},</span><span class="nx">W</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">imports</span><span class="o">=</span></div><div class='line' id='LC19'><span class="p">{</span><span class="nx">paths</span><span class="o">:</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">paths</span><span class="o">||</span><span class="p">[],</span><span class="nx">queue</span><span class="o">:</span><span class="p">[],</span><span class="nx">files</span><span class="o">:</span><span class="p">{},</span><span class="nx">push</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">k</span><span class="p">){</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">o</span><span class="p">.</span><span class="nx">Parser</span><span class="p">.</span><span class="nx">importer</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">paths</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">p</span><span class="p">){</span><span class="nx">l</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">f</span><span class="p">),</span><span class="mi">1</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">files</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">;</span><span class="nx">k</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">V</span><span class="p">()})}};</span><span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="o">=</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">optimization</span><span class="o">=</span><span class="s2">"optimization"</span><span class="k">in</span> <span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">optimization</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">filename</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">filename</span><span class="o">||</span><span class="kc">null</span><span class="p">;</span><span class="k">return</span> <span class="nx">U</span><span class="o">=</span><span class="p">{</span><span class="nx">imports</span><span class="o">:</span><span class="nx">W</span><span class="p">,</span><span class="nx">parse</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">k</span><span class="p">){</span><span class="kd">var</span> <span class="nx">l</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">K</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">n</span><span class="o">=</span><span class="nx">H</span><span class="o">=</span><span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">u</span><span class="o">=</span><span class="p">[];</span><span class="nx">i</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\r\n/g</span><span class="p">,</span><span class="s2">"\n"</span><span class="p">);</span><span class="nx">u</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">L</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">G</span><span class="o">=</span><span class="sr">/[^"&#39;\{\}\/]+/g</span><span class="p">,</span><span class="nx">A</span><span class="o">=</span><span class="sr">/\/\*(?:[^*]|\*+[^\/*])*\*+\/|\/\/.*/g</span><span class="p">,</span></div><div class='line' id='LC20'><span class="nx">B</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">w</span><span class="p">,</span><span class="nx">z</span><span class="o">=</span><span class="nx">L</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">C</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">v</span><span class="p">;</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">s</span><span class="o">++</span><span class="p">){</span><span class="nx">G</span><span class="p">.</span><span class="nx">lastIndex</span><span class="o">=</span><span class="nx">s</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">w</span><span class="o">=</span><span class="nx">G</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">index</span><span class="o">===</span><span class="nx">s</span><span class="p">){</span><span class="nx">s</span><span class="o">+=</span><span class="nx">w</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span><span class="nx">z</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">w</span><span class="p">[</span><span class="mi">0</span><span class="p">])}</span><span class="nx">v</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span><span class="nx">A</span><span class="p">.</span><span class="nx">lastIndex</span><span class="o">=</span><span class="nx">s</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">C</span><span class="o">&amp;&amp;</span><span class="nx">v</span><span class="o">===</span><span class="s2">"/"</span><span class="p">){</span><span class="nx">w</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">s</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">w</span><span class="o">===</span><span class="s2">"/"</span><span class="o">||</span><span class="nx">w</span><span class="o">===</span><span class="s2">"*"</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">w</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">index</span><span class="o">===</span><span class="nx">s</span><span class="p">){</span><span class="nx">s</span><span class="o">+=</span><span class="nx">w</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span><span class="nx">z</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">w</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="nx">v</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">s</span><span class="p">)}}</span><span class="k">if</span><span class="p">(</span><span class="nx">v</span><span class="o">===</span><span class="s2">"{"</span><span class="o">&amp;&amp;!</span><span class="nx">C</span><span class="p">){</span><span class="nx">B</span><span class="o">++</span><span class="p">;</span><span class="nx">z</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">v</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">v</span><span class="o">===</span><span class="s2">"}"</span><span class="o">&amp;&amp;!</span><span class="nx">C</span><span class="p">){</span><span class="nx">B</span><span class="o">--</span><span class="p">;</span><span class="nx">z</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span><span class="nx">L</span><span class="p">[</span><span class="o">++</span><span class="nx">I</span><span class="p">]</span><span class="o">=</span><span class="nx">z</span><span class="o">=</span><span class="p">[]}</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">v</span><span class="o">===</span><span class="s1">&#39;"&#39;</span><span class="o">||</span><span class="nx">v</span><span class="o">===</span><span class="s2">"&#39;"</span><span class="p">)</span><span class="nx">C</span><span class="o">=</span><span class="nx">C</span><span class="o">?</span><span class="nx">C</span><span class="o">===</span><span class="nx">v</span><span class="o">?</span><span class="kc">false</span><span class="o">:</span><span class="nx">C</span><span class="o">:</span><span class="nx">v</span><span class="p">;</span><span class="nx">z</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">v</span><span class="p">)}}</span><span class="k">if</span><span class="p">(</span><span class="nx">B</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">"Missing closing &#39;}&#39;"</span><span class="p">);</span><span class="k">return</span> <span class="nx">L</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">E</span><span class="p">){</span><span class="k">return</span> <span class="nx">E</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">""</span><span class="p">)})}([[]]);</span><span class="nx">l</span><span class="o">=</span><span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Ruleset</span><span class="p">([],</span></div><div class='line' id='LC21'><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">parsers</span><span class="p">.</span><span class="nx">primary</span><span class="p">));</span><span class="nx">l</span><span class="p">.</span><span class="nx">root</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="nx">l</span><span class="p">.</span><span class="nx">toCSS</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">L</span><span class="p">){</span><span class="kd">var</span> <span class="nx">I</span><span class="p">,</span><span class="nx">G</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">A</span><span class="p">,</span><span class="nx">B</span><span class="p">){</span><span class="kd">function</span> <span class="nx">w</span><span class="p">(</span><span class="nx">v</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">v</span><span class="p">).</span><span class="nx">match</span><span class="p">(</span><span class="sr">/\n/g</span><span class="p">)</span><span class="o">||</span><span class="s2">""</span><span class="p">).</span><span class="nx">length</span><span class="p">}</span><span class="kd">var</span> <span class="nx">z</span><span class="o">=</span><span class="p">[];</span><span class="nx">A</span><span class="o">=</span><span class="nx">A</span><span class="o">||</span><span class="p">{};</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">B</span><span class="o">===</span><span class="s2">"object"</span><span class="o">&amp;&amp;!</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">B</span><span class="p">)){</span><span class="nx">B</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">B</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">v</span><span class="p">){</span><span class="kd">var</span> <span class="nx">E</span><span class="o">=</span><span class="nx">B</span><span class="p">[</span><span class="nx">v</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">E</span> <span class="k">instanceof</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Value</span><span class="p">)){</span><span class="nx">E</span> <span class="k">instanceof</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Expression</span><span class="o">||</span><span class="p">(</span><span class="nx">E</span><span class="o">=</span><span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Expression</span><span class="p">([</span><span class="nx">E</span><span class="p">]));</span><span class="nx">E</span><span class="o">=</span><span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Value</span><span class="p">([</span><span class="nx">E</span><span class="p">])}</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Rule</span><span class="p">(</span><span class="s2">"@"</span><span class="o">+</span><span class="nx">v</span><span class="p">,</span><span class="nx">E</span><span class="p">,</span><span class="kc">false</span><span class="p">,</span><span class="mi">0</span><span class="p">)});</span><span class="nx">z</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Ruleset</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">B</span><span class="p">)]}</span><span class="k">try</span><span class="p">{</span><span class="kd">var</span> <span class="nx">C</span><span class="o">=</span><span class="nx">L</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,[],{</span><span class="nx">frames</span><span class="o">:</span><span class="nx">z</span><span class="p">,</span><span class="nx">compress</span><span class="o">:</span><span class="nx">A</span><span class="p">.</span><span class="nx">compress</span><span class="o">||</span><span class="kc">false</span><span class="p">})}</span><span class="k">catch</span><span class="p">(</span><span class="nx">s</span><span class="p">){</span><span class="nx">G</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">"\n"</span><span class="p">);</span></div><div class='line' id='LC22'><span class="nx">I</span><span class="o">=</span><span class="nx">w</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">index</span><span class="p">);</span><span class="nx">A</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">index</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">z</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">A</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">A</span><span class="p">)</span><span class="o">!==</span><span class="s2">"\n"</span><span class="p">;</span><span class="nx">A</span><span class="o">--</span><span class="p">)</span><span class="nx">z</span><span class="o">++</span><span class="p">;</span><span class="k">throw</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">"NameError"</span><span class="p">,</span><span class="nx">message</span><span class="o">:</span><span class="nx">s</span><span class="p">.</span><span class="nx">message</span><span class="p">,</span><span class="nx">filename</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">filename</span><span class="p">,</span><span class="nx">index</span><span class="o">:</span><span class="nx">s</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span><span class="nx">line</span><span class="o">:</span><span class="nx">I</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">callLine</span><span class="o">:</span><span class="nx">s</span><span class="p">.</span><span class="nx">call</span><span class="o">&amp;&amp;</span><span class="nx">w</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">call</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">callExtract</span><span class="o">:</span><span class="nx">G</span><span class="p">[</span><span class="nx">w</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">call</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="nx">stack</span><span class="o">:</span><span class="nx">s</span><span class="p">.</span><span class="nx">stack</span><span class="p">,</span><span class="nx">column</span><span class="o">:</span><span class="nx">z</span><span class="p">,</span><span class="nx">extract</span><span class="o">:</span><span class="p">[</span><span class="nx">G</span><span class="p">[</span><span class="nx">I</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="nx">G</span><span class="p">[</span><span class="nx">I</span><span class="p">],</span><span class="nx">G</span><span class="p">[</span><span class="nx">I</span><span class="o">+</span><span class="mi">1</span><span class="p">]]};}</span><span class="k">return</span> <span class="nx">A</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="nx">C</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(\s)+/g</span><span class="p">,</span><span class="s2">"$1"</span><span class="p">)</span><span class="o">:</span><span class="nx">C</span><span class="p">}}(</span><span class="nx">l</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">"\n"</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="p">).</span><span class="nx">match</span><span class="p">(</span><span class="sr">/\n/g</span><span class="p">)</span><span class="o">||</span><span class="s2">""</span><span class="p">).</span><span class="nx">length</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">Q</span><span class="o">=</span><span class="nx">h</span><span class="p">,</span><span class="nx">X</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">Q</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">Q</span><span class="p">)</span><span class="o">!==</span><span class="s2">"\n"</span><span class="p">;</span><span class="nx">Q</span><span class="o">--</span><span class="p">)</span><span class="nx">X</span><span class="o">++</span><span class="p">;</span><span class="nx">K</span><span class="o">=</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">"ParseError"</span><span class="p">,</span><span class="nx">message</span><span class="o">:</span><span class="s2">"Syntax Error on line "</span><span class="o">+</span><span class="nx">f</span><span class="p">,</span><span class="nx">filename</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">filename</span><span class="p">,</span></div><div class='line' id='LC23'><span class="nx">line</span><span class="o">:</span><span class="nx">f</span><span class="p">,</span><span class="nx">column</span><span class="o">:</span><span class="nx">X</span><span class="p">,</span><span class="nx">extract</span><span class="o">:</span><span class="p">[</span><span class="nx">p</span><span class="p">[</span><span class="nx">f</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span><span class="nx">p</span><span class="p">[</span><span class="nx">f</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="nx">p</span><span class="p">[</span><span class="nx">f</span><span class="p">]]}}</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">imports</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="nx">V</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">k</span><span class="p">(</span><span class="nx">K</span><span class="p">,</span><span class="nx">l</span><span class="p">)};</span><span class="k">else</span> <span class="nx">k</span><span class="p">(</span><span class="nx">K</span><span class="p">,</span><span class="nx">l</span><span class="p">)},</span><span class="nx">parsers</span><span class="o">:</span><span class="p">{</span><span class="nx">primary</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="p">[];(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">mixin</span><span class="p">.</span><span class="nx">definition</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">rule</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ruleset</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">mixin</span><span class="p">.</span><span class="nx">call</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">comment</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">directive</span><span class="p">))</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^[\s\n]+/</span><span class="p">);)</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="k">return</span> <span class="nx">k</span><span class="p">},</span><span class="nx">comment</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="o">===</span><span class="s2">"/"</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">===</span><span class="s2">"/"</span><span class="p">)</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Comment</span><span class="p">(</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^\/\/.*/</span><span class="p">),</span><span class="kc">true</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^\/\*(?:[^*]|\*+[^\/*])*\*+\/\n?/</span><span class="p">))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Comment</span><span class="p">(</span><span class="nx">f</span><span class="p">)},</span><span class="nx">entities</span><span class="o">:</span><span class="p">{</span><span class="nx">quoted</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">;</span></div><div class='line' id='LC24'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="o">!==</span><span class="s1">&#39;"&#39;</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="o">!==</span><span class="s2">"&#39;"</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^"((?:[^"\\\r\n]|\\.)*)"|&#39;((?:[^&#39;\\\r\n]|\\.)*)&#39;/</span><span class="p">))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Quoted</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">||</span><span class="nx">f</span><span class="p">[</span><span class="mi">2</span><span class="p">])},</span><span class="nx">keyword</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^[A-Za-z-]+/</span><span class="p">))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Keyword</span><span class="p">(</span><span class="nx">f</span><span class="p">)},</span><span class="nx">call</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">,</span><span class="nx">k</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^([\w-]+|%)\(/</span><span class="p">)){</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">toLowerCase</span><span class="p">()</span><span class="o">===</span><span class="s2">"alpha"</span><span class="p">)</span><span class="k">return</span> <span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">alpha</span><span class="p">);</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">arguments</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">(</span><span class="s2">")"</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Call</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">k</span><span class="p">)}},</span><span class="nx">arguments</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="p">[],</span><span class="nx">k</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">expression</span><span class="p">);){</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">k</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">(</span><span class="s2">","</span><span class="p">))</span><span class="k">break</span><span class="p">}</span><span class="k">return</span> <span class="nx">f</span><span class="p">},</span><span class="nx">literal</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">dimension</span><span class="p">)</span><span class="o">||</span></div><div class='line' id='LC25'><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">quoted</span><span class="p">)},</span><span class="nx">url</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="o">!==</span><span class="s2">"u"</span><span class="o">||!</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^url\(/</span><span class="p">))){</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">quoted</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^[-\w%@$\/.&amp;=:;#+?]+/</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">(</span><span class="s2">")"</span><span class="p">))</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">"missing closing ) for url()"</span><span class="p">);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">URL</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">value</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Anonymous</span><span class="p">(</span><span class="nx">f</span><span class="p">))}},</span><span class="nx">variable</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="o">===</span><span class="s2">"@"</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^@[\w-]+/</span><span class="p">)))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Variable</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">k</span><span class="p">)},</span><span class="nx">color</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="o">===</span><span class="s2">"#"</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})/</span><span class="p">)))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">])},</span><span class="nx">dimension</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">;</span></div><div class='line' id='LC26'><span class="nx">f</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">f</span><span class="o">&gt;</span><span class="mi">57</span><span class="o">||</span><span class="nx">f</span><span class="o">&lt;</span><span class="mi">45</span><span class="o">||</span><span class="nx">f</span><span class="o">===</span><span class="mi">47</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^(-?\d*\.?\d+)(px|%|em|pc|ex|in|deg|s|ms|pt|cm|mm)?/</span><span class="p">))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Dimension</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="mi">2</span><span class="p">])}},</span><span class="nx">variable</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="o">===</span><span class="s2">"@"</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^(@[\w-]+)\s*:/</span><span class="p">)))</span><span class="k">return</span> <span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">]},</span><span class="nx">shorthand</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">,</span><span class="nx">k</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">j</span><span class="p">(</span><span class="sr">/^[@\w.-]+\/[@\w.-]+/</span><span class="p">))</span><span class="k">if</span><span class="p">((</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entity</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">(</span><span class="s2">"/"</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entity</span><span class="p">)))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Shorthand</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">k</span><span class="p">)},</span><span class="nx">mixin</span><span class="o">:</span><span class="p">{</span><span class="nx">call</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="p">[],</span><span class="nx">k</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">K</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">k</span><span class="o">!==</span><span class="s2">"."</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="o">!==</span><span class="s2">"#"</span><span class="p">)){</span><span class="k">for</span><span class="p">(;</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^[#.][\w-]+/</span><span class="p">);){</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Element</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">));</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="s2">"&gt;"</span><span class="p">)}</span><span class="nx">a</span><span class="p">(</span><span class="s2">"("</span><span class="p">)</span><span class="o">&amp;&amp;</span></div><div class='line' id='LC27'><span class="p">(</span><span class="nx">p</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">arguments</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">(</span><span class="s2">")"</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">(</span><span class="s2">";"</span><span class="p">)</span><span class="o">||</span><span class="nx">j</span><span class="p">(</span><span class="s2">"}"</span><span class="p">)))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">mixin</span><span class="p">.</span><span class="nx">Call</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">K</span><span class="p">)}},</span><span class="nx">definition</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="p">[],</span><span class="nx">l</span><span class="p">,</span><span class="nx">p</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="o">!==</span><span class="s2">"."</span><span class="o">||</span><span class="nx">j</span><span class="p">(</span><span class="sr">/^[^{]*(;|})/</span><span class="p">)))</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^([#.][\w-]+)\s*\(/</span><span class="p">)){</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^@[\w-]+/</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">literal</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">keyword</span><span class="p">);){</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">===</span><span class="s2">"@"</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">(</span><span class="s2">":"</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">expression</span><span class="p">))</span><span class="nx">k</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span><span class="nx">l</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="nx">p</span><span class="p">});</span><span class="k">else</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">"Expected value"</span><span class="p">);</span><span class="k">else</span> <span class="nx">k</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span><span class="nx">l</span><span class="p">});</span><span class="k">else</span> <span class="nx">k</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">value</span><span class="o">:</span><span class="nx">l</span><span class="p">});</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">(</span><span class="s2">","</span><span class="p">))</span><span class="k">break</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">(</span><span class="s2">")"</span><span class="p">))</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">"Expected )"</span><span class="p">);</span></div><div class='line' id='LC28'><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">block</span><span class="p">))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">mixin</span><span class="p">.</span><span class="nx">Definition</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">l</span><span class="p">)}}},</span><span class="nx">entity</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">literal</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">variable</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">url</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">call</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">keyword</span><span class="p">)},</span><span class="nx">end</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">a</span><span class="p">(</span><span class="s2">";"</span><span class="p">)</span><span class="o">||</span><span class="nx">j</span><span class="p">(</span><span class="s2">"}"</span><span class="p">)},</span><span class="nx">alpha</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^opacity=/i</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^\d+/</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">variable</span><span class="p">)){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">(</span><span class="s2">")"</span><span class="p">))</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">"missing closing ) for alpha()"</span><span class="p">);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Alpha</span><span class="p">(</span><span class="nx">f</span><span class="p">)}},</span><span class="nx">element</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">combinator</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^[.#:]?[\w-]+/</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="s2">"*"</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">attribute</span><span class="p">)</span><span class="o">||</span></div><div class='line' id='LC29'><span class="nx">a</span><span class="p">(</span><span class="sr">/^\([^)@]+\)/</span><span class="p">))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Element</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">)},</span><span class="nx">combinator</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">===</span><span class="s2">"&gt;"</span><span class="o">||</span><span class="nx">f</span><span class="o">===</span><span class="s2">"&amp;"</span><span class="o">||</span><span class="nx">f</span><span class="o">===</span><span class="s2">"+"</span><span class="o">||</span><span class="nx">f</span><span class="o">===</span><span class="s2">"~"</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">++</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="o">===</span><span class="s2">" "</span><span class="p">;)</span><span class="nx">h</span><span class="o">++</span><span class="p">;</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Combinator</span><span class="p">(</span><span class="nx">f</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">===</span><span class="s2">":"</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">===</span><span class="s2">":"</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">+=</span><span class="mi">2</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="o">===</span><span class="s2">" "</span><span class="p">;)</span><span class="nx">h</span><span class="o">++</span><span class="p">;</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Combinator</span><span class="p">(</span><span class="s2">"::"</span><span class="p">)}</span><span class="k">else</span> <span class="k">return</span> <span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">h</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">===</span><span class="s2">" "</span><span class="o">?</span><span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Combinator</span><span class="p">(</span><span class="s2">" "</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Combinator</span><span class="p">(</span><span class="kc">null</span><span class="p">)},</span><span class="nx">selector</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="p">[],</span><span class="nx">l</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">element</span><span class="p">);){</span><span class="nx">l</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="o">===</span><span class="s2">"{"</span><span class="o">||</span><span class="nx">l</span><span class="o">===</span><span class="s2">"}"</span><span class="o">||</span><span class="nx">l</span><span class="o">===</span><span class="s2">";"</span><span class="o">||</span><span class="nx">l</span><span class="o">===</span><span class="s2">","</span><span class="p">)</span><span class="k">break</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Selector</span><span class="p">(</span><span class="nx">k</span><span class="p">)},</span></div><div class='line' id='LC30'><span class="nx">tag</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">a</span><span class="p">(</span><span class="sr">/^[a-zA-Z][a-zA-Z-]*[0-9]?/</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="s2">"*"</span><span class="p">)},</span><span class="nx">attribute</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="s2">""</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">p</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">(</span><span class="s2">"["</span><span class="p">)){</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^[a-z-]+/</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">quoted</span><span class="p">))</span><span class="nx">f</span><span class="o">=</span><span class="p">(</span><span class="nx">p</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^[|~*$^]?=/</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">quoted</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^[\w-]+/</span><span class="p">))</span><span class="o">?</span><span class="p">[</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">l</span><span class="p">.</span><span class="nx">toCSS</span><span class="o">?</span><span class="nx">l</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">()</span><span class="o">:</span><span class="nx">l</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">""</span><span class="p">)</span><span class="o">:</span><span class="nx">k</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">(</span><span class="s2">"]"</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span><span class="k">return</span><span class="s2">"["</span><span class="o">+</span><span class="nx">f</span><span class="o">+</span><span class="s2">"]"</span><span class="p">}},</span><span class="nx">block</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">(</span><span class="s2">"{"</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">primary</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">(</span><span class="s2">"}"</span><span class="p">))</span><span class="k">return</span> <span class="nx">f</span><span class="p">},</span><span class="nx">ruleset</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="p">[],</span><span class="nx">k</span><span class="p">,</span><span class="nx">l</span><span class="p">;</span><span class="nx">b</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="sr">/^([.#: \w-]+)[\s\n]*\{/</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">u</span><span class="p">[</span><span class="nx">n</span><span class="p">])){</span><span class="nx">h</span><span class="o">+=</span><span class="nx">k</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Selector</span><span class="p">([</span><span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Element</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">k</span><span class="p">[</span><span class="mi">1</span><span class="p">])])]}</span><span class="k">else</span><span class="p">{</span><span class="k">for</span><span class="p">(;</span><span class="nx">k</span><span class="o">=</span></div><div class='line' id='LC31'><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">selector</span><span class="p">);){</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">k</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">(</span><span class="s2">","</span><span class="p">))</span><span class="k">break</span><span class="p">}</span><span class="nx">k</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">comment</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">block</span><span class="p">)))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Ruleset</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">l</span><span class="p">);</span><span class="k">else</span><span class="p">{</span><span class="nx">t</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="nx">e</span><span class="p">()}},</span><span class="nx">rule</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="kd">var</span> <span class="nx">k</span><span class="p">;</span><span class="nx">b</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">f</span><span class="o">===</span><span class="s2">"."</span><span class="o">||</span><span class="nx">f</span><span class="o">===</span><span class="s2">"#"</span><span class="o">||</span><span class="nx">f</span><span class="o">===</span><span class="s2">"&amp;"</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">name</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">variable</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">property</span><span class="p">)){</span><span class="k">if</span><span class="p">(</span><span class="nx">name</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">!=</span><span class="s2">"@"</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">match</span><span class="o">=</span><span class="sr">/^([^@+\/&#39;"*(;{}-]*);/</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">u</span><span class="p">[</span><span class="nx">n</span><span class="p">]))){</span><span class="nx">h</span><span class="o">+=</span><span class="nx">match</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Anonymous</span><span class="p">(</span><span class="nx">match</span><span class="p">[</span><span class="mi">1</span><span class="p">])}</span><span class="k">else</span> <span class="nx">f</span><span class="o">=</span><span class="nx">name</span><span class="o">===</span><span class="s2">"font"</span><span class="o">?</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">font</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">important</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">end</span><span class="p">))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Rule</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">x</span><span class="p">);</span><span class="k">else</span><span class="p">{</span><span class="nx">t</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span></div><div class='line' id='LC32'><span class="nx">e</span><span class="p">()}}},</span><span class="s2">"import"</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^@import\s+/</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">quoted</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">url</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">(</span><span class="s2">";"</span><span class="p">))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Import</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">W</span><span class="p">)},</span><span class="nx">directive</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">l</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="o">===</span><span class="s2">"@"</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">[</span><span class="s2">"import"</span><span class="p">]))</span><span class="k">return</span> <span class="nx">k</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^@media|@page/</span><span class="p">)){</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^[^{]+/</span><span class="p">).</span><span class="nx">trim</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">block</span><span class="p">))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Directive</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="s2">" "</span><span class="o">+</span><span class="nx">l</span><span class="p">,</span><span class="nx">k</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^@[-a-z]+/</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">===</span><span class="s2">"@font-face"</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">block</span><span class="p">))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Directive</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">k</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">((</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entity</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">(</span><span class="s2">";"</span><span class="p">))</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Directive</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">k</span><span class="p">)},</span><span class="nx">font</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span></div><div class='line' id='LC33'><span class="p">[],</span><span class="nx">k</span><span class="o">=</span><span class="p">[],</span><span class="nx">l</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">shorthand</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entity</span><span class="p">);)</span><span class="nx">k</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">l</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Expression</span><span class="p">(</span><span class="nx">k</span><span class="p">));</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">(</span><span class="s2">","</span><span class="p">))</span><span class="k">for</span><span class="p">(;</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">expression</span><span class="p">);){</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">l</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">(</span><span class="s2">","</span><span class="p">))</span><span class="k">break</span><span class="p">}</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Value</span><span class="p">(</span><span class="nx">f</span><span class="p">)},</span><span class="nx">value</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="p">[];</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">expression</span><span class="p">);){</span><span class="nx">k</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">(</span><span class="s2">","</span><span class="p">))</span><span class="k">break</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Value</span><span class="p">(</span><span class="nx">k</span><span class="p">)},</span><span class="nx">important</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="o">===</span><span class="s2">"!"</span><span class="p">)</span><span class="k">return</span> <span class="nx">a</span><span class="p">(</span><span class="sr">/^! *important/</span><span class="p">)},</span><span class="nx">sub</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">(</span><span class="s2">"("</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">expression</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">(</span><span class="s2">")"</span><span class="p">))</span><span class="k">return</span> <span class="nx">f</span><span class="p">},</span><span class="nx">multiplication</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">p</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">operand</span><span class="p">)){</span><span class="k">for</span><span class="p">(;(</span><span class="nx">l</span><span class="o">=</span></div><div class='line' id='LC34'><span class="nx">a</span><span class="p">(</span><span class="s2">"/"</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="s2">"*"</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">operand</span><span class="p">));)</span><span class="nx">p</span><span class="o">=</span><span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Operation</span><span class="p">(</span><span class="nx">l</span><span class="p">,[</span><span class="nx">p</span><span class="o">||</span><span class="nx">f</span><span class="p">,</span><span class="nx">k</span><span class="p">]);</span><span class="k">return</span> <span class="nx">p</span><span class="o">||</span><span class="nx">f</span><span class="p">}},</span><span class="nx">addition</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">p</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">multiplication</span><span class="p">)){</span><span class="k">for</span><span class="p">(;(</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^[-+]\s+/</span><span class="p">)</span><span class="o">||</span><span class="nx">i</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">h</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">!=</span><span class="s2">" "</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">(</span><span class="s2">"+"</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="s2">"-"</span><span class="p">)))</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">multiplication</span><span class="p">));)</span><span class="nx">p</span><span class="o">=</span><span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Operation</span><span class="p">(</span><span class="nx">l</span><span class="p">,[</span><span class="nx">p</span><span class="o">||</span><span class="nx">f</span><span class="p">,</span><span class="nx">k</span><span class="p">]);</span><span class="k">return</span> <span class="nx">p</span><span class="o">||</span><span class="nx">f</span><span class="p">}},</span><span class="nx">operand</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">sub</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">dimension</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entities</span><span class="p">.</span><span class="nx">variable</span><span class="p">)},</span><span class="nx">expression</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="p">[];</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">addition</span><span class="p">)</span><span class="o">||</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">entity</span><span class="p">);)</span><span class="nx">k</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="k">return</span> <span class="k">new</span> <span class="nx">m</span><span class="p">.</span><span class="nx">Expression</span><span class="p">(</span><span class="nx">k</span><span class="p">)},</span></div><div class='line' id='LC35'><span class="nx">property</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="sr">/^(\*?-?[-a-z_0-9]+)\s*:/</span><span class="p">))</span><span class="k">return</span> <span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">]}}}};</span><span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">F</span><span class="o">!==</span><span class="s2">"undefined"</span><span class="p">)</span><span class="nx">o</span><span class="p">.</span><span class="nx">Parser</span><span class="p">.</span><span class="nx">importer</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">!==</span><span class="s2">"/"</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">d</span><span class="p">;</span><span class="nx">S</span><span class="p">({</span><span class="nx">href</span><span class="o">:</span><span class="nx">d</span><span class="p">,</span><span class="nx">title</span><span class="o">:</span><span class="nx">d</span><span class="p">},</span><span class="kd">function</span><span class="p">(</span><span class="nx">g</span><span class="p">){</span><span class="nx">e</span><span class="p">(</span><span class="nx">g</span><span class="p">)})};(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">functions</span><span class="p">.</span><span class="nx">hsla</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">h</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">s</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">l</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Dimension</span><span class="p">)</span><span class="k">return</span> <span class="nb">parseFloat</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">unit</span><span class="o">==</span><span class="s2">"%"</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">value</span><span class="o">/</span><span class="mi">100</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">===</span><span class="s2">"number"</span><span class="p">)</span><span class="k">return</span> <span class="nx">a</span><span class="p">;</span><span class="k">else</span> <span class="k">throw</span><span class="p">{</span><span class="nx">error</span><span class="o">:</span><span class="s2">"RuntimeError"</span><span class="p">,</span><span class="nx">message</span><span class="o">:</span><span class="s2">"color functions take numbers as parameters"</span><span class="p">};}</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span></div><div class='line' id='LC36'><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">))}</span><span class="nx">d</span><span class="p">.</span><span class="nx">functions</span><span class="o">=</span><span class="p">{</span><span class="nx">rgb</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">rgba</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="mi">1</span><span class="p">)},</span><span class="nx">rgba</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="p">[</span><span class="nx">a</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">i</span><span class="p">].</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span><span class="k">return</span> <span class="nx">e</span><span class="p">(</span><span class="nx">n</span><span class="p">)});</span><span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="p">)},</span><span class="nx">hsl</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">hsla</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="mi">1</span><span class="p">)},</span><span class="nx">hsla</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="kd">function</span> <span class="nx">n</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="nx">t</span><span class="o">=</span><span class="nx">t</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="nx">t</span><span class="o">+</span><span class="mi">1</span><span class="o">:</span><span class="nx">t</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">?</span><span class="nx">t</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">t</span><span class="p">;</span><span class="k">return</span> <span class="nx">t</span><span class="o">*</span><span class="mi">6</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">?</span><span class="nx">x</span><span class="o">+</span><span class="p">(</span><span class="nx">r</span><span class="o">-</span><span class="nx">x</span><span class="p">)</span><span class="o">*</span><span class="nx">t</span><span class="o">*</span><span class="mi">6</span><span class="o">:</span><span class="nx">t</span><span class="o">*</span><span class="mi">2</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">?</span><span class="nx">r</span><span class="o">:</span><span class="nx">t</span><span class="o">*</span><span class="mi">3</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">?</span><span class="nx">x</span><span class="o">+</span><span class="p">(</span><span class="nx">r</span><span class="o">-</span><span class="nx">x</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="mi">2</span><span class="o">/</span><span class="mi">3</span><span class="o">-</span><span class="nx">t</span><span class="p">)</span><span class="o">*</span><span class="mi">6</span><span class="o">:</span><span class="nx">x</span><span class="p">}</span><span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">%</span><span class="mi">360</span><span class="o">/</span><span class="mi">360</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">j</span><span class="p">);</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span><span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">i</span><span class="o">&lt;=</span><span class="mf">0.5</span><span class="o">?</span><span class="nx">i</span><span class="o">*</span><span class="p">(</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="nx">i</span><span class="o">+</span><span class="nx">j</span><span class="o">-</span><span class="nx">i</span><span class="o">*</span><span class="nx">j</span><span class="p">,</span><span class="nx">x</span><span class="o">=</span><span class="nx">i</span><span class="o">*</span><span class="mi">2</span><span class="o">-</span><span class="nx">r</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">rgba</span><span class="p">(</span><span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span><span class="o">*</span><span class="mi">255</span><span class="p">,</span><span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">*</span><span class="mi">255</span><span class="p">,</span><span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span><span class="o">*</span><span class="mi">255</span><span class="p">,</span><span class="nx">h</span><span class="p">)},</span><span class="nx">hue</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Dimension</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">toHSL</span><span class="p">().</span><span class="nx">h</span><span class="p">))},</span></div><div class='line' id='LC37'><span class="nx">saturation</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Dimension</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">toHSL</span><span class="p">().</span><span class="nx">s</span><span class="o">*</span><span class="mi">100</span><span class="p">),</span><span class="s2">"%"</span><span class="p">)},</span><span class="nx">lightness</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Dimension</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">toHSL</span><span class="p">().</span><span class="nx">l</span><span class="o">*</span><span class="mi">100</span><span class="p">),</span><span class="s2">"%"</span><span class="p">)},</span><span class="nx">alpha</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Dimension</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">toHSL</span><span class="p">().</span><span class="nx">a</span><span class="p">)},</span><span class="nx">saturate</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">j</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">toHSL</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">s</span><span class="o">+=</span><span class="nx">j</span><span class="p">.</span><span class="nx">value</span><span class="o">/</span><span class="mi">100</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">s</span><span class="o">=</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">s</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">desaturate</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">j</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">toHSL</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">s</span><span class="o">-=</span><span class="nx">j</span><span class="p">.</span><span class="nx">value</span><span class="o">/</span><span class="mi">100</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">s</span><span class="o">=</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">s</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">lighten</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">j</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">toHSL</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">l</span><span class="o">+=</span><span class="nx">j</span><span class="p">.</span><span class="nx">value</span><span class="o">/</span><span class="mi">100</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">l</span><span class="o">=</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">l</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">darken</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">j</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">toHSL</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">l</span><span class="o">-=</span><span class="nx">j</span><span class="p">.</span><span class="nx">value</span><span class="o">/</span><span class="mi">100</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">l</span><span class="o">=</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">l</span><span class="p">);</span></div><div class='line' id='LC38'><span class="k">return</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">spin</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">j</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">toHSL</span><span class="p">();</span><span class="nx">j</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">h</span><span class="o">+</span><span class="nx">j</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="o">%</span><span class="mi">360</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">h</span><span class="o">=</span><span class="nx">j</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">360</span><span class="o">+</span><span class="nx">j</span><span class="o">:</span><span class="nx">j</span><span class="p">;</span><span class="k">return</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">greyscale</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">desaturate</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Dimension</span><span class="p">(</span><span class="mi">100</span><span class="p">))},</span><span class="nx">e</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Anonymous</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="s2">"%"</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="nx">i</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">content</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">)</span><span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/%s/</span><span class="p">,</span><span class="nx">j</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">content</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/%[da]/</span><span class="p">,</span><span class="nx">j</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">toCSS</span><span class="p">());</span><span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/%%/g</span><span class="p">,</span><span class="s2">"%"</span><span class="p">);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Quoted</span><span class="p">(</span><span class="s1">&#39;"&#39;</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="s1">&#39;"&#39;</span><span class="p">,</span><span class="nx">i</span><span class="p">)}}})(</span><span class="nx">q</span><span class="p">(</span><span class="s2">"less/tree"</span><span class="p">));(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">Alpha</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">b</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">Alpha</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span></div><div class='line' id='LC39'><span class="p">{</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="s2">"alpha(opacity="</span><span class="o">+</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">toCSS</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">()</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span><span class="o">+</span><span class="s2">")"</span><span class="p">},</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">}}})(</span><span class="nx">q</span><span class="p">(</span><span class="s2">"less/tree"</span><span class="p">));(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">Anonymous</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">content</span><span class="o">||</span><span class="nx">b</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">Anonymous</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">},</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">}}})(</span><span class="nx">q</span><span class="p">(</span><span class="s2">"less/tree"</span><span class="p">));(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">Call</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">args</span><span class="o">=</span><span class="nx">e</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">Call</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">args</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">g</span><span class="p">){</span><span class="k">return</span> <span class="nx">g</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">)});</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="k">in</span> <span class="nx">d</span><span class="p">.</span><span class="nx">functions</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">functions</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">functions</span><span class="p">,</span></div><div class='line' id='LC40'><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Anonymous</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">"("</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">g</span><span class="p">){</span><span class="k">return</span> <span class="nx">g</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">()}).</span><span class="nx">join</span><span class="p">(</span><span class="s2">", "</span><span class="p">)</span><span class="o">+</span><span class="s2">")"</span><span class="p">)},</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">toCSS</span><span class="p">()}}})(</span><span class="nx">q</span><span class="p">(</span><span class="s2">"less/tree"</span><span class="p">));(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">Color</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">rgb</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">==</span><span class="mi">6</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/.{2}/g</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">g</span><span class="p">){</span><span class="k">return</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="mi">16</span><span class="p">)})</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">""</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">g</span><span class="p">){</span><span class="k">return</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">g</span><span class="o">+</span><span class="nx">g</span><span class="p">,</span><span class="mi">16</span><span class="p">)});</span><span class="k">this</span><span class="p">.</span><span class="nx">alpha</span><span class="o">=</span><span class="k">typeof</span> <span class="nx">e</span><span class="o">===</span><span class="s2">"number"</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="mi">1</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">Color</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">alpha</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">?</span><span class="s2">"rgba("</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">rgb</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">b</span><span class="p">)}).</span><span class="nx">concat</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">alpha</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s2">", "</span><span class="p">)</span><span class="o">+</span></div><div class='line' id='LC41'><span class="s2">")"</span><span class="o">:</span><span class="s2">"#"</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">rgb</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="p">(</span><span class="nx">b</span><span class="o">&gt;</span><span class="mi">255</span><span class="o">?</span><span class="mi">255</span><span class="o">:</span><span class="nx">b</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">b</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">1</span><span class="o">?</span><span class="s2">"0"</span><span class="o">+</span><span class="nx">b</span><span class="o">:</span><span class="nx">b</span><span class="p">}).</span><span class="nx">join</span><span class="p">(</span><span class="s2">""</span><span class="p">)},</span><span class="nx">operate</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="p">[];</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Color</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">toColor</span><span class="p">());</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="nx">g</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">operate</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">rgb</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="nx">e</span><span class="p">.</span><span class="nx">rgb</span><span class="p">[</span><span class="nx">a</span><span class="p">]);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">g</span><span class="p">)},</span><span class="nx">toHSL</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">rgb</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">/</span><span class="mi">255</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">rgb</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">/</span><span class="mi">255</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">rgb</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">/</span><span class="mi">255</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">alpha</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="p">),</span><span class="nx">i</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="p">),</span><span class="nx">h</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="p">(</span><span class="nx">j</span><span class="o">+</span><span class="nx">i</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">j</span><span class="o">-</span><span class="nx">i</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">j</span><span class="o">===</span><span class="nx">i</span><span class="p">)</span><span class="nx">h</span><span class="o">=</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="nx">i</span><span class="o">=</span><span class="nx">n</span><span class="o">&gt;</span><span class="mf">0.5</span><span class="o">?</span><span class="nx">r</span><span class="o">/</span><span class="p">(</span><span class="mi">2</span><span class="o">-</span><span class="nx">j</span><span class="o">-</span><span class="nx">i</span><span class="p">)</span><span class="o">:</span><span class="nx">r</span><span class="o">/</span><span class="p">(</span><span class="nx">j</span><span class="o">+</span><span class="nx">i</span><span class="p">);</span><span class="k">switch</span><span class="p">(</span><span class="nx">j</span><span class="p">){</span><span class="k">case</span> <span class="nx">b</span><span class="o">:</span><span class="nx">h</span><span class="o">=</span><span class="p">(</span><span class="nx">e</span><span class="o">-</span><span class="nx">g</span><span class="p">)</span><span class="o">/</span><span class="nx">r</span><span class="o">+</span><span class="p">(</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">g</span><span class="o">?</span><span class="mi">6</span><span class="o">:</span><span class="mi">0</span><span class="p">);</span><span class="k">break</span><span class="p">;</span></div><div class='line' id='LC42'><span class="k">case</span> <span class="nx">e</span><span class="o">:</span><span class="nx">h</span><span class="o">=</span><span class="p">(</span><span class="nx">g</span><span class="o">-</span><span class="nx">b</span><span class="p">)</span><span class="o">/</span><span class="nx">r</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">g</span><span class="o">:</span><span class="nx">h</span><span class="o">=</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">e</span><span class="p">)</span><span class="o">/</span><span class="nx">r</span><span class="o">+</span><span class="mi">4</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="nx">h</span><span class="o">/=</span><span class="mi">6</span><span class="p">}</span><span class="k">return</span><span class="p">{</span><span class="nx">h</span><span class="o">:</span><span class="nx">h</span><span class="o">*</span><span class="mi">360</span><span class="p">,</span><span class="nx">s</span><span class="o">:</span><span class="nx">i</span><span class="p">,</span><span class="nx">l</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">a</span><span class="o">:</span><span class="nx">a</span><span class="p">}}}})(</span><span class="nx">q</span><span class="p">(</span><span class="s2">"less/tree"</span><span class="p">));(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">Comment</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">silent</span><span class="o">=!!</span><span class="nx">e</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">Comment</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">""</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">},</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">}}})(</span><span class="nx">q</span><span class="p">(</span><span class="s2">"less/tree"</span><span class="p">));(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">Dimension</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nb">parseFloat</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">unit</span><span class="o">=</span><span class="nx">e</span><span class="o">||</span><span class="kc">null</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">Dimension</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">toColor</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Color</span><span class="p">([</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">])},</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">+</span></div><div class='line' id='LC43'><span class="k">this</span><span class="p">.</span><span class="nx">unit</span><span class="p">},</span><span class="nx">operate</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Dimension</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">operate</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">value</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">unit</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">unit</span><span class="p">)}}})(</span><span class="nx">q</span><span class="p">(</span><span class="s2">"less/tree"</span><span class="p">));(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">Directive</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nb">Array</span><span class="p">.</span><span class="nx">isArray</span><span class="p">(</span><span class="nx">e</span><span class="p">))</span><span class="k">this</span><span class="p">.</span><span class="nx">ruleset</span><span class="o">=</span><span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Ruleset</span><span class="p">([],</span><span class="nx">e</span><span class="p">);</span><span class="k">else</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">e</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">Directive</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ruleset</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">ruleset</span><span class="p">.</span><span class="nx">root</span><span class="o">=</span><span class="kc">true</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">"{"</span><span class="o">:</span><span class="s2">" {\n  "</span><span class="p">)</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">ruleset</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">).</span><span class="nx">trim</span><span class="p">().</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\n/g</span><span class="p">,</span><span class="s2">"\n  "</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">"}"</span><span class="o">:</span><span class="s2">"\n}\n"</span><span class="p">)}</span><span class="k">else</span> <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">" "</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">()</span><span class="o">+</span><span class="s2">";\n"</span><span class="p">},</span></div><div class='line' id='LC44'><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">frames</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">ruleset</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">ruleset</span><span class="p">.</span><span class="nx">evalRules</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">frames</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">variable</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Ruleset</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">variable</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ruleset</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">find</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Ruleset</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">find</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ruleset</span><span class="p">,</span><span class="nx">arguments</span><span class="p">)},</span><span class="nx">rulesets</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Ruleset</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">rulesets</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ruleset</span><span class="p">)}}})(</span><span class="nx">q</span><span class="p">(</span><span class="s2">"less/tree"</span><span class="p">));(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">Element</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">combinator</span><span class="o">=</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Combinator</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Combinator</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">trim</span><span class="p">()};</span><span class="nx">d</span><span class="p">.</span><span class="nx">Element</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toCSS</span><span class="o">=</span></div><div class='line' id='LC45'><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">combinator</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">b</span><span class="o">||</span><span class="p">{})</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">Combinator</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">b</span><span class="o">===</span><span class="s2">" "</span><span class="o">?</span><span class="s2">" "</span><span class="o">:</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span><span class="o">:</span><span class="s2">""</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">Combinator</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toCSS</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span><span class="p">{</span><span class="s2">""</span><span class="o">:</span><span class="s2">""</span><span class="p">,</span><span class="s2">" "</span><span class="o">:</span><span class="s2">" "</span><span class="p">,</span><span class="s2">"&amp;"</span><span class="o">:</span><span class="s2">""</span><span class="p">,</span><span class="s2">":"</span><span class="o">:</span><span class="s2">" :"</span><span class="p">,</span><span class="s2">"::"</span><span class="o">:</span><span class="s2">"::"</span><span class="p">,</span><span class="s2">"+"</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">"+"</span><span class="o">:</span><span class="s2">" + "</span><span class="p">,</span><span class="s2">"~"</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">"~"</span><span class="o">:</span><span class="s2">" ~ "</span><span class="p">,</span><span class="s2">"&gt;"</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">"&gt;"</span><span class="o">:</span><span class="s2">" &gt; "</span><span class="p">}[</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">]}})(</span><span class="nx">q</span><span class="p">(</span><span class="s2">"less/tree"</span><span class="p">));(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">Expression</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">b</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">Expression</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">?</span><span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Expression</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">)}))</span><span class="o">:</span></div><div class='line' id='LC46'><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">)},</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">()}).</span><span class="nx">join</span><span class="p">(</span><span class="s2">" "</span><span class="p">)}}})(</span><span class="nx">q</span><span class="p">(</span><span class="s2">"less/tree"</span><span class="p">));(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">Import</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_path</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">path</span><span class="o">=</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Quoted</span><span class="o">?</span><span class="sr">/\.(le?|c)ss$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">content</span><span class="p">)</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">content</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">content</span><span class="o">+</span><span class="s2">".less"</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">content</span><span class="o">||</span><span class="nx">b</span><span class="p">.</span><span class="nx">value</span><span class="p">;(</span><span class="k">this</span><span class="p">.</span><span class="nx">css</span><span class="o">=</span><span class="sr">/css$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">path</span><span class="p">))</span><span class="o">||</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">path</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">)</span><span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">"Error parsing "</span><span class="o">+</span><span class="nx">g</span><span class="p">.</span><span class="nx">path</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">root</span><span class="o">=</span><span class="nx">a</span><span class="p">})};</span><span class="nx">d</span><span class="p">.</span><span class="nx">Import</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">css</span><span class="o">?</span><span class="s2">"@import "</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_path</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">()</span><span class="o">+</span></div><div class='line' id='LC47'><span class="s2">";\n"</span><span class="o">:</span><span class="s2">""</span><span class="p">},</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">css</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="p">.</span><span class="nx">rules</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="p">.</span><span class="nx">rules</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="k">instanceof</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Import</span><span class="o">&amp;&amp;</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">splice</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="p">.</span><span class="nx">rules</span><span class="p">,[</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="p">.</span><span class="nx">rules</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nb">eval</span><span class="p">()));</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="p">.</span><span class="nx">rules</span><span class="p">}}}})(</span><span class="nx">q</span><span class="p">(</span><span class="s2">"less/tree"</span><span class="p">));(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">Keyword</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">b</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">Keyword</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">}}})(</span><span class="nx">q</span><span class="p">(</span><span class="s2">"less/tree"</span><span class="p">));(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">mixin</span><span class="o">=</span><span class="p">{};</span><span class="nx">d</span><span class="p">.</span><span class="nx">mixin</span><span class="p">.</span><span class="nx">Call</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">selector</span><span class="o">=</span><span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Selector</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span></div><div class='line' id='LC48'><span class="k">this</span><span class="p">.</span><span class="nx">arguments</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="o">=</span><span class="nx">g</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">mixin</span><span class="p">.</span><span class="nx">Call</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="p">[],</span><span class="nx">a</span><span class="o">=</span><span class="kc">false</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">frames</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">((</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">frames</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">find</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">selector</span><span class="p">)).</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">match</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">arguments</span><span class="p">,</span><span class="nx">b</span><span class="p">))</span><span class="k">try</span><span class="p">{</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nb">eval</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">arguments</span><span class="p">,</span><span class="nx">b</span><span class="p">).</span><span class="nx">rules</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="kc">true</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">i</span><span class="p">){</span><span class="k">throw</span><span class="p">{</span><span class="nx">message</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">message</span><span class="p">,</span><span class="nx">index</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span><span class="nx">call</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="p">};}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span> <span class="nx">g</span><span class="p">;</span><span class="k">else</span> <span class="k">throw</span><span class="p">{</span><span class="nx">message</span><span class="o">:</span><span class="s2">"No matching definition was found for `"</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">selector</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">().</span><span class="nx">trim</span><span class="p">()</span><span class="o">+</span><span class="s2">"("</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">h</span><span class="p">){</span><span class="k">return</span> <span class="nx">h</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">()}).</span><span class="nx">join</span><span class="p">(</span><span class="s2">", "</span><span class="p">)</span><span class="o">+</span></div><div class='line' id='LC49'><span class="s2">")`"</span><span class="p">,</span><span class="nx">index</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="p">};}</span><span class="k">throw</span><span class="p">{</span><span class="nx">message</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">selector</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">().</span><span class="nx">trim</span><span class="p">()</span><span class="o">+</span><span class="s2">" is undefined"</span><span class="p">,</span><span class="nx">index</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="p">};}};</span><span class="nx">d</span><span class="p">.</span><span class="nx">mixin</span><span class="p">.</span><span class="nx">Definition</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">selectors</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Selector</span><span class="p">([</span><span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Element</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="nx">b</span><span class="p">)])];</span><span class="k">this</span><span class="p">.</span><span class="nx">params</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">arity</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rules</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_lookups</span><span class="o">=</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">required</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">j</span><span class="p">){</span><span class="k">return</span> <span class="nx">j</span><span class="p">.</span><span class="nx">name</span><span class="o">&amp;&amp;!</span><span class="nx">j</span><span class="p">.</span><span class="nx">value</span><span class="o">?</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="o">:</span><span class="nx">a</span><span class="p">},</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">Ruleset</span><span class="p">.</span><span class="nx">prototype</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">mixin</span><span class="p">.</span><span class="nx">Definition</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="s2">""</span><span class="p">},</span><span class="nx">variable</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">variable</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">find</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">find</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span></div><div class='line' id='LC50'><span class="nx">arguments</span><span class="p">)},</span><span class="nx">rulesets</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">rulesets</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">)},</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Ruleset</span><span class="p">(</span><span class="kc">null</span><span class="p">,[]),</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">j</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">params</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">name</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">params</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">value</span><span class="p">)</span><span class="nx">g</span><span class="p">.</span><span class="nx">rules</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Rule</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">params</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">name</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">e</span><span class="p">)));</span><span class="k">else</span> <span class="k">throw</span><span class="p">{</span><span class="nx">message</span><span class="o">:</span><span class="s2">"wrong number of arguments for "</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">" ("</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">+</span><span class="s2">" for "</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">arity</span><span class="o">+</span><span class="s2">")"</span><span class="p">};</span><span class="k">return</span><span class="p">(</span><span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Ruleset</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">rules</span><span class="p">)).</span><span class="nx">evalRules</span><span class="p">({</span><span class="nx">frames</span><span class="o">:</span><span class="p">[</span><span class="k">this</span><span class="p">,</span><span class="nx">g</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">frames</span><span class="p">)})},</span><span class="nx">match</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="o">&lt;</span></div><div class='line' id='LC51'><span class="k">this</span><span class="p">.</span><span class="nx">required</span><span class="p">)</span><span class="k">return</span> <span class="kc">false</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">arity</span><span class="p">);</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">params</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">name</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">wildcard</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nb">eval</span><span class="p">(</span><span class="nx">e</span><span class="p">).</span><span class="nx">toCSS</span><span class="p">()</span><span class="o">!=</span><span class="k">this</span><span class="p">.</span><span class="nx">params</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">value</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">e</span><span class="p">).</span><span class="nx">toCSS</span><span class="p">())</span><span class="k">return</span> <span class="kc">false</span><span class="p">;</span><span class="k">return</span> <span class="kc">true</span><span class="p">}}})(</span><span class="nx">q</span><span class="p">(</span><span class="s2">"less/tree"</span><span class="p">));(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">Operation</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">op</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">trim</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">operands</span><span class="o">=</span><span class="nx">e</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">Operation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nb">eval</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">operands</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">operands</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="kd">var</span> <span class="nx">g</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Dimension</span><span class="o">&amp;&amp;</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Color</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">op</span><span class="o">===</span><span class="s2">"*"</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">op</span><span class="o">===</span><span class="s2">"+"</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">g</span><span class="p">}</span><span class="k">else</span> <span class="k">throw</span><span class="p">{</span><span class="nx">name</span><span class="o">:</span><span class="s2">"OperationError"</span><span class="p">,</span></div><div class='line' id='LC52'><span class="nx">message</span><span class="o">:</span><span class="s2">"Can&#39;t substract or divide a color from a number"</span><span class="p">};</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">operate</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">op</span><span class="p">,</span><span class="nx">b</span><span class="p">)};</span><span class="nx">d</span><span class="p">.</span><span class="nx">operate</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="k">switch</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">case</span> <span class="s2">"+"</span><span class="o">:</span><span class="k">return</span> <span class="nx">e</span><span class="o">+</span><span class="nx">g</span><span class="p">;</span><span class="k">case</span> <span class="s2">"-"</span><span class="o">:</span><span class="k">return</span> <span class="nx">e</span><span class="o">-</span><span class="nx">g</span><span class="p">;</span><span class="k">case</span> <span class="s2">"*"</span><span class="o">:</span><span class="k">return</span> <span class="nx">e</span><span class="o">*</span><span class="nx">g</span><span class="p">;</span><span class="k">case</span> <span class="s2">"/"</span><span class="o">:</span><span class="k">return</span> <span class="nx">e</span><span class="o">/</span><span class="nx">g</span><span class="p">}}})(</span><span class="nx">q</span><span class="p">(</span><span class="s2">"less/tree"</span><span class="p">));(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">Quoted</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">content</span><span class="o">=</span><span class="nx">e</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">Quoted</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">},</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">}}})(</span><span class="nx">q</span><span class="p">(</span><span class="s2">"less/tree"</span><span class="p">));(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">Rule</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Value</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Value</span><span class="p">([</span><span class="nx">e</span><span class="p">]);</span><span class="k">this</span><span class="p">.</span><span class="nx">important</span><span class="o">=</span></div><div class='line' id='LC53'><span class="nx">g</span><span class="o">?</span><span class="s2">" "</span><span class="o">+</span><span class="nx">g</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span><span class="o">:</span><span class="s2">""</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">variable</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">===</span><span class="s2">"@"</span><span class="o">?</span><span class="kc">true</span><span class="o">:</span><span class="kc">false</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">Rule</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toCSS</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">variable</span><span class="o">?</span><span class="s2">""</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">":"</span><span class="o">:</span><span class="s2">": "</span><span class="p">)</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">important</span><span class="o">+</span><span class="s2">";"</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">Rule</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nb">eval</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Rule</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">important</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="p">)};</span><span class="nx">d</span><span class="p">.</span><span class="nx">Shorthand</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">Shorthand</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">+</span><span class="s2">"/"</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">b</span><span class="p">)},</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">}}})(</span><span class="nx">q</span><span class="p">(</span><span class="s2">"less/tree"</span><span class="p">));(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">Ruleset</span><span class="o">=</span></div><div class='line' id='LC54'><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">selectors</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rules</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_lookups</span><span class="o">=</span><span class="p">{}};</span><span class="nx">d</span><span class="p">.</span><span class="nx">Ruleset</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">evalRules</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">rules</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">g</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">evalRules</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">evalRules</span><span class="p">(</span><span class="nx">b</span><span class="p">));</span><span class="k">else</span> <span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">d</span><span class="p">.</span><span class="nx">mixin</span><span class="p">.</span><span class="nx">Call</span><span class="o">?</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nb">eval</span><span class="o">?</span><span class="nx">g</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">:</span><span class="s2">""</span><span class="p">)});</span><span class="k">this</span><span class="p">.</span><span class="nx">rules</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">match</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span><span class="o">!</span><span class="nx">b</span><span class="o">||</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">0</span><span class="p">},</span><span class="nx">variable</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_variables</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">_variables</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_variables</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">rules</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span> <span class="k">instanceof</span></div><div class='line' id='LC55'><span class="nx">d</span><span class="p">.</span><span class="nx">Rule</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">.</span><span class="nx">variable</span><span class="o">===</span><span class="kc">true</span><span class="p">)</span><span class="nx">e</span><span class="p">[</span><span class="nx">g</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">},{}))[</span><span class="nx">b</span><span class="p">]},</span><span class="nx">rulesets</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_rulesets</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">_rulesets</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_rulesets</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">rules</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Ruleset</span><span class="o">||</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">d</span><span class="p">.</span><span class="nx">mixin</span><span class="p">.</span><span class="nx">Definition</span><span class="p">)</span><span class="k">return</span> <span class="nx">b</span><span class="p">}))},</span><span class="nx">find</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">||</span><span class="k">this</span><span class="p">;</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="p">[],</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">in</span> <span class="k">this</span><span class="p">.</span><span class="nx">_lookups</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_lookups</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">rulesets</span><span class="p">().</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">j</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">j</span><span class="o">!==</span><span class="nx">e</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">.</span><span class="nx">selectors</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">selectors</span><span class="p">[</span><span class="nx">i</span><span class="p">])){</span><span class="nx">b</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">1</span><span class="o">?</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Selector</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">)),</span></div><div class='line' id='LC56'><span class="nx">e</span><span class="p">))</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">);</span><span class="k">break</span><span class="p">}});</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_lookups</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">},</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="p">[],</span><span class="nx">a</span><span class="o">=</span><span class="p">[],</span><span class="nx">j</span><span class="o">=</span><span class="p">[],</span><span class="nx">i</span><span class="o">=</span><span class="p">[];</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">rules</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">rules</span><span class="p">[</span><span class="nx">h</span><span class="p">]</span><span class="k">instanceof</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Import</span><span class="o">&amp;&amp;</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">splice</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">rules</span><span class="p">,[</span><span class="nx">h</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">rules</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nb">eval</span><span class="p">(</span><span class="nx">e</span><span class="p">)));</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span><span class="mi">0</span><span class="p">)</span><span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">selectors</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">r</span><span class="p">){</span><span class="k">return</span><span class="p">[</span><span class="nx">r</span><span class="p">]});</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">selectors</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="nx">i</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">concat</span><span class="p">([</span><span class="k">this</span><span class="p">.</span><span class="nx">selectors</span><span class="p">[</span><span class="nx">h</span><span class="p">]]));</span><span class="nx">e</span><span class="p">.</span><span class="nx">frames</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">rules</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">rules</span><span class="p">[</span><span class="nx">h</span><span class="p">]</span><span class="k">instanceof</span></div><div class='line' id='LC57'><span class="nx">d</span><span class="p">.</span><span class="nx">mixin</span><span class="p">.</span><span class="nx">Call</span><span class="o">&amp;&amp;</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">splice</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">rules</span><span class="p">,[</span><span class="nx">h</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nx">concat</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">rules</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nb">eval</span><span class="p">(</span><span class="nx">e</span><span class="p">)));</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">rules</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">rules</span><span class="p">[</span><span class="nx">h</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Directive</span><span class="p">)</span><span class="nx">j</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">e</span><span class="p">).</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">e</span><span class="p">));</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">rules</span><span class="p">)</span><span class="nx">j</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">e</span><span class="p">));</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Comment</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">silent</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="o">?</span><span class="nx">j</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">e</span><span class="p">))</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">e</span><span class="p">)));</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">toCSS</span><span class="o">&amp;&amp;!</span><span class="nx">b</span><span class="p">.</span><span class="nx">variable</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">e</span><span class="p">).</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">e</span><span class="p">));</span><span class="k">else</span> <span class="nx">b</span><span class="p">.</span><span class="nx">value</span><span class="o">&amp;&amp;!</span><span class="nx">b</span><span class="p">.</span><span class="nx">variable</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">toString</span><span class="p">())}</span><span class="nx">j</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">""</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="p">)</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">""</span><span class="o">:</span><span class="s2">"\n"</span><span class="p">));</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span></div><div class='line' id='LC58'><span class="mi">0</span><span class="p">){</span><span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">r</span><span class="p">){</span><span class="k">return</span> <span class="nx">r</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">){</span><span class="k">return</span> <span class="nx">x</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">e</span><span class="p">)}).</span><span class="nx">join</span><span class="p">(</span><span class="s2">""</span><span class="p">).</span><span class="nx">trim</span><span class="p">()}).</span><span class="nx">join</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">","</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">3</span><span class="o">?</span><span class="s2">",\n"</span><span class="o">:</span><span class="s2">", "</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">,(</span><span class="nx">e</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">"{"</span><span class="o">:</span><span class="s2">" {\n  "</span><span class="p">)</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">""</span><span class="o">:</span><span class="s2">"\n  "</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">"}"</span><span class="o">:</span><span class="s2">"\n}\n"</span><span class="p">))}</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">frames</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span><span class="k">return</span> <span class="nx">g</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">""</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">"\n"</span><span class="o">:</span><span class="s2">""</span><span class="p">)}}})(</span><span class="nx">q</span><span class="p">(</span><span class="s2">"less/tree"</span><span class="p">));(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">Selector</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">combinator</span><span class="p">.</span><span class="nx">value</span><span class="o">===</span><span class="s2">""</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">combinator</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="s2">" "</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">Selector</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">match</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">value</span><span class="o">===</span></div><div class='line' id='LC59'><span class="nx">b</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">value</span><span class="o">?</span><span class="kc">true</span><span class="o">:</span><span class="kc">false</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">Selector</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toCSS</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_css</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_css</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_css</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span><span class="k">return</span> <span class="k">typeof</span> <span class="nx">e</span><span class="o">===</span><span class="s2">"string"</span><span class="o">?</span><span class="s2">" "</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">trim</span><span class="p">()</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">b</span><span class="p">)}).</span><span class="nx">join</span><span class="p">(</span><span class="s2">""</span><span class="p">)}})(</span><span class="nx">q</span><span class="p">(</span><span class="s2">"less/tree"</span><span class="p">));(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">URL</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">b</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="s2">"url("</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">()</span><span class="o">+</span><span class="s2">")"</span><span class="p">},</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">}}})(</span><span class="nx">q</span><span class="p">(</span><span class="s2">"less/tree"</span><span class="p">));(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">Value</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">is</span><span class="o">=</span><span class="s2">"value"</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">Value</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="o">===</span></div><div class='line' id='LC60'><span class="mi">1</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">:</span><span class="k">new</span> <span class="nx">d</span><span class="p">.</span><span class="nx">Value</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">)}))},</span><span class="nx">toCSS</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span><span class="k">return</span> <span class="nx">e</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(</span><span class="nx">b</span><span class="p">)}).</span><span class="nx">join</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">compress</span><span class="o">?</span><span class="s2">","</span><span class="o">:</span><span class="s2">", "</span><span class="p">)}}})(</span><span class="nx">q</span><span class="p">(</span><span class="s2">"less/tree"</span><span class="p">));(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">Variable</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="o">=</span><span class="nx">e</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">Variable</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nb">eval</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">frames</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">j</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">variable</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="k">return</span> <span class="nx">g</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nb">eval</span><span class="p">(</span><span class="nx">b</span><span class="p">)}))</span><span class="k">return</span> <span class="nx">e</span><span class="p">;</span><span class="k">else</span> <span class="k">throw</span><span class="p">{</span><span class="nx">message</span><span class="o">:</span><span class="s2">"variable "</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">" is undefined"</span><span class="p">,</span><span class="nx">index</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="p">};}}})(</span><span class="nx">q</span><span class="p">(</span><span class="s2">"less/tree"</span><span class="p">));</span></div><div class='line' id='LC61'><span class="nx">q</span><span class="p">(</span><span class="s2">"less/tree"</span><span class="p">).</span><span class="nx">find</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="p">]))</span><span class="k">return</span> <span class="nx">g</span><span class="p">;</span><span class="k">return</span> <span class="kc">null</span><span class="p">};</span><span class="kd">var</span> <span class="nx">P</span><span class="o">=</span><span class="nx">location</span><span class="p">.</span><span class="nx">protocol</span><span class="o">===</span><span class="s2">"file:"</span><span class="o">||</span><span class="nx">location</span><span class="p">.</span><span class="nx">protocol</span><span class="o">===</span><span class="s2">"chrome:"</span><span class="o">||</span><span class="nx">location</span><span class="p">.</span><span class="nx">protocol</span><span class="o">===</span><span class="s2">"resource:"</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">env</span><span class="o">=</span><span class="nx">location</span><span class="p">.</span><span class="nx">hostname</span><span class="o">==</span><span class="s2">"127.0.0.1"</span><span class="o">||</span><span class="nx">location</span><span class="p">.</span><span class="nx">hostname</span><span class="o">==</span><span class="s2">"0.0.0.0"</span><span class="o">||</span><span class="nx">location</span><span class="p">.</span><span class="nx">hostname</span><span class="o">==</span><span class="s2">"localhost"</span><span class="o">||</span><span class="nx">location</span><span class="p">.</span><span class="nx">port</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">||</span><span class="nx">P</span><span class="o">?</span><span class="s2">"development"</span><span class="o">:</span><span class="s2">"production"</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">async</span><span class="o">=</span><span class="kc">false</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">poll</span><span class="o">=</span><span class="nx">P</span><span class="o">?</span><span class="mi">1</span><span class="nx">E3</span><span class="o">:</span><span class="mi">1500</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">watch</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">watchMode</span><span class="o">=</span><span class="kc">true</span><span class="p">};</span><span class="nx">o</span><span class="p">.</span><span class="nx">unwatch</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">watchMode</span><span class="o">=</span><span class="kc">false</span><span class="p">};</span><span class="k">if</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">env</span><span class="o">===</span><span class="s2">"development"</span><span class="p">){</span><span class="nx">o</span><span class="p">.</span><span class="nx">optimization</span><span class="o">=</span></div><div class='line' id='LC62'><span class="mi">0</span><span class="p">;</span><span class="sr">/!watch/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">o</span><span class="p">.</span><span class="nx">watch</span><span class="p">();</span><span class="nx">o</span><span class="p">.</span><span class="nx">watchTimer</span><span class="o">=</span><span class="nx">setInterval</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">o</span><span class="p">.</span><span class="nx">watchMode</span><span class="o">&amp;&amp;</span><span class="nx">R</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">O</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(),</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">lastModified</span><span class="p">)})},</span><span class="nx">o</span><span class="p">.</span><span class="nx">poll</span><span class="p">)}</span><span class="k">else</span> <span class="nx">o</span><span class="p">.</span><span class="nx">optimization</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span><span class="kd">var</span> <span class="nx">D</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="nx">D</span><span class="o">=</span><span class="k">typeof</span> <span class="nx">F</span><span class="p">.</span><span class="nx">localStorage</span><span class="o">===</span><span class="s2">"undefined"</span><span class="o">?</span><span class="kc">null</span><span class="o">:</span><span class="nx">F</span><span class="p">.</span><span class="nx">localStorage</span><span class="p">}</span><span class="k">catch</span><span class="p">(</span><span class="nx">ca</span><span class="p">){</span><span class="nx">D</span><span class="o">=</span><span class="kc">null</span><span class="p">}</span><span class="kd">var</span> <span class="nx">M</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">"link"</span><span class="p">),</span><span class="nx">Y</span><span class="o">=</span><span class="sr">/^text\/(x-)?less$/</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">sheets</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">y</span><span class="o">&lt;</span><span class="nx">M</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">y</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">M</span><span class="p">[</span><span class="nx">y</span><span class="p">].</span><span class="nx">rel</span><span class="o">===</span><span class="s2">"stylesheet/less"</span><span class="o">||</span><span class="nx">M</span><span class="p">[</span><span class="nx">y</span><span class="p">].</span><span class="nx">rel</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/stylesheet/</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">M</span><span class="p">[</span><span class="nx">y</span><span class="p">].</span><span class="nx">type</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">Y</span><span class="p">))</span><span class="nx">o</span><span class="p">.</span><span class="nx">sheets</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">M</span><span class="p">[</span><span class="nx">y</span><span class="p">]);</span><span class="kd">var</span> <span class="nx">N</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">"style"</span><span class="p">);</span></div><div class='line' id='LC63'><span class="k">for</span><span class="p">(</span><span class="nx">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">y</span><span class="o">&lt;</span><span class="nx">N</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">y</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">N</span><span class="p">[</span><span class="nx">y</span><span class="p">].</span><span class="nx">type</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">Y</span><span class="p">))(</span><span class="k">new</span> <span class="nx">o</span><span class="p">.</span><span class="nx">Parser</span><span class="p">).</span><span class="nx">parse</span><span class="p">(</span><span class="nx">N</span><span class="p">[</span><span class="nx">y</span><span class="p">].</span><span class="nx">innerHTML</span><span class="o">||</span><span class="s2">""</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">N</span><span class="p">[</span><span class="nx">y</span><span class="p">].</span><span class="nx">type</span><span class="o">=</span><span class="s2">"text/css"</span><span class="p">;</span><span class="nx">N</span><span class="p">[</span><span class="nx">y</span><span class="p">].</span><span class="nx">innerHTML</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">()});</span><span class="kd">var</span> <span class="nx">ba</span><span class="o">=</span><span class="nx">endTime</span><span class="o">=</span><span class="k">new</span> <span class="nb">Date</span><span class="p">;</span><span class="nx">o</span><span class="p">.</span><span class="nx">refresh</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">R</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">local</span><span class="p">)</span><span class="nx">J</span><span class="p">(</span><span class="s2">"loading "</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">href</span><span class="o">+</span><span class="s2">" from cache."</span><span class="p">);</span><span class="k">else</span><span class="p">{</span><span class="nx">J</span><span class="p">(</span><span class="s2">"parsed "</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">href</span><span class="o">+</span><span class="s2">" successfully."</span><span class="p">);</span><span class="nx">O</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">toCSS</span><span class="p">(),</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">lastModified</span><span class="p">)}</span><span class="nx">J</span><span class="p">(</span><span class="s2">"css for "</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">href</span><span class="o">+</span><span class="s2">" generated in "</span><span class="o">+</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="o">-</span><span class="nx">endTime</span><span class="p">)</span><span class="o">+</span><span class="s2">"ms"</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">remaining</span><span class="o">===</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="nx">J</span><span class="p">(</span><span class="s2">"css generated in "</span><span class="o">+</span><span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="o">-</span><span class="nx">ba</span><span class="p">)</span><span class="o">+</span><span class="s2">"ms"</span><span class="p">);</span><span class="nx">endTime</span><span class="o">=</span><span class="k">new</span> <span class="nb">Date</span><span class="p">},</span><span class="nx">d</span><span class="p">)};</span><span class="nx">o</span><span class="p">.</span><span class="nx">refresh</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">env</span><span class="o">===</span><span class="s2">"development"</span><span class="p">)})(</span><span class="nb">window</span><span class="p">);</span></div><div class='line' id='LC64'><br/></div></pre></div>
            
          </td>
        </tr>
      </table>
    
  </div>


      </div>
    </div>

  


    </div>
  
      

      <div class="push"></div>
    </div>

    <div id="footer">
      <div class="site">
        <div class="info">
          <div class="locales">
            
            
          </div>
          <div class="links">
            <a href="http://github.com/blog"><b>Blog</b></a> |
            <a href="http://support.github.com">Support</a> |
            <a href="http://github.com/training">Training</a> |
            <a href="http://github.com/contact">Contact</a> |
            <a href="http://develop.github.com">API</a> |
            <a href="http://status.github.com">Status</a> |
            <a href="http://twitter.com/github">Twitter</a> |
            <a href="http://help.github.com">Help</a> |
            <a href="http://github.com/security">Security</a>
          </div>
          <div class="company">
            &copy;
            2010
            <span id="_rrt" title="0.09289s from fe4.rs.github.com">GitHub</span> Inc.
            All rights reserved. |
            <a href="/site/terms">Terms of Service</a> |
            <a href="/site/privacy">Privacy Policy</a>
          </div>
        </div>
        <div class="sponsor">
          <div>
            Powered by the <a href="http://www.rackspace.com ">Dedicated
            Servers</a> and<br/> <a href="http://www.rackspacecloud.com">Cloud
            Computing</a> of Rackspace Hosting<span>&reg;</span>
          </div>
          <a href="http://www.rackspace.com">
            <img alt="Dedicated Server" src="http://assets3.github.com/images/modules/footer/rackspace_logo.png?61b5039b1ce255c2a6acbff52acc1f9b426a05b2" />
          </a>
        </div>
      </div>
    </div>

    <script>window._auth_token = "c8ca5266c2bce2bf9cdf9e95ceeef728a69adb5b"</script>
    

    <script type="text/javascript">
      _kmq.push(['trackClick', 'entice_banner_link', 'Entice banner clicked']);
      
    </script>
    
  </body>
</html>

